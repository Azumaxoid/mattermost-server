// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by "make app-layers"
// DO NOT EDIT

package opentracing

import (
	"bytes"
	"context"
	"crypto/ecdsa"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"time"
	logtime "time"

	"github.com/dyatlov/go-opengraph/opengraph"
	"github.com/gorilla/websocket"
	"github.com/mattermost/go-i18n/i18n"
	goi18n "github.com/mattermost/go-i18n/i18n"
	"github.com/mattermost/mattermost-server/v5/app"
	"github.com/mattermost/mattermost-server/v5/audit"
	"github.com/mattermost/mattermost-server/v5/einterfaces"
	"github.com/mattermost/mattermost-server/v5/mlog"
	"github.com/mattermost/mattermost-server/v5/model"
	"github.com/mattermost/mattermost-server/v5/plugin"
	"github.com/mattermost/mattermost-server/v5/services/filesstore"
	"github.com/mattermost/mattermost-server/v5/services/httpservice"
	"github.com/mattermost/mattermost-server/v5/services/imageproxy"
	"github.com/mattermost/mattermost-server/v5/services/searchengine"
	"github.com/mattermost/mattermost-server/v5/services/timezones"
	"github.com/mattermost/mattermost-server/v5/services/tracing"
	"github.com/mattermost/mattermost-server/v5/store"
	newrelic "github.com/newrelic/go-agent/v3/newrelic"
	"github.com/opentracing/opentracing-go/ext"
	spanlog "github.com/opentracing/opentracing-go/log"
)

type OpenTracingAppLayer struct {
	app app.AppIface

	srv *app.Server

	log              *mlog.Logger
	notificationsLog *mlog.Logger

	t              i18n.TranslateFunc
	session        model.Session
	requestId      string
	ipAddress      string
	path           string
	userAgent      string
	acceptLanguage string

	accountMigration einterfaces.AccountMigrationInterface
	cluster          einterfaces.ClusterInterface
	compliance       einterfaces.ComplianceInterface
	dataRetention    einterfaces.DataRetentionInterface
	searchEngine     *searchengine.Broker
	ldap             einterfaces.LdapInterface
	messageExport    einterfaces.MessageExportInterface
	metrics          einterfaces.MetricsInterface
	notification     einterfaces.NotificationInterface
	saml             einterfaces.SamlInterface

	httpService httpservice.HTTPService
	imageProxy  *imageproxy.ImageProxy
	timezones   *timezones.Timezones

	context context.Context
	ctx     context.Context
}

func (a *OpenTracingAppLayer) ActivateMfa(userId string, token string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.ActivateMfa")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ActivateMfa")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ActivateMfa")
	segment := newrelic.StartSegment(nrtx, "nr.app.ActivateMfa")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ActivateMfa(userId, token)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) AddChannelMember(userId string, channel *model.Channel, userRequestorId string, postRootId string) (*model.ChannelMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddChannelMember")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddChannelMember")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddChannelMember")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddChannelMember")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AddChannelMember(userId, channel, userRequestorId, postRootId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AddConfigListener(listener func(*model.Config, *model.Config)) string {
	origCtx := a.ctx
	a.log.Info("nr.app.AddConfigListener")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddConfigListener")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddConfigListener")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddConfigListener")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.AddConfigListener(listener)

	return resultVar0
}

func (a *OpenTracingAppLayer) AddCursorIdsForPostList(originalList *model.PostList, afterPost string, beforePost string, since int64, page int, perPage int) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddCursorIdsForPostList")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddCursorIdsForPostList")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddCursorIdsForPostList")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddCursorIdsForPostList")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.AddCursorIdsForPostList(originalList, afterPost, beforePost, since, page, perPage)
}

func (a *OpenTracingAppLayer) AddDirectChannels(teamId string, user *model.User) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.AddDirectChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddDirectChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddDirectChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddDirectChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.AddDirectChannels(teamId, user)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) AddPublicKey(name string, key io.Reader) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.AddPublicKey")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddPublicKey")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddPublicKey")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddPublicKey")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.AddPublicKey(name, key)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) AddSamlIdpCertificate(fileData *multipart.FileHeader) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.AddSamlIdpCertificate")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddSamlIdpCertificate")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddSamlIdpCertificate")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddSamlIdpCertificate")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.AddSamlIdpCertificate(fileData)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) AddSamlPrivateCertificate(fileData *multipart.FileHeader) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.AddSamlPrivateCertificate")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddSamlPrivateCertificate")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddSamlPrivateCertificate")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddSamlPrivateCertificate")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.AddSamlPrivateCertificate(fileData)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) AddSamlPublicCertificate(fileData *multipart.FileHeader) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.AddSamlPublicCertificate")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddSamlPublicCertificate")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddSamlPublicCertificate")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddSamlPublicCertificate")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.AddSamlPublicCertificate(fileData)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) AddSessionToCache(session *model.Session) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddSessionToCache")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddSessionToCache")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddSessionToCache")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddSessionToCache")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.AddSessionToCache(session)
}

func (a *OpenTracingAppLayer) AddStatusCache(status *model.Status) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddStatusCache")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddStatusCache")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddStatusCache")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddStatusCache")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.AddStatusCache(status)
}

func (a *OpenTracingAppLayer) AddStatusCacheSkipClusterSend(status *model.Status) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddStatusCacheSkipClusterSend")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddStatusCacheSkipClusterSend")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddStatusCacheSkipClusterSend")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddStatusCacheSkipClusterSend")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.AddStatusCacheSkipClusterSend(status)
}

func (a *OpenTracingAppLayer) AddTeamMember(teamId string, userId string) (*model.TeamMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddTeamMember")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddTeamMember")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddTeamMember")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddTeamMember")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AddTeamMember(teamId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AddTeamMemberByInviteId(inviteId string, userId string) (*model.TeamMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddTeamMemberByInviteId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddTeamMemberByInviteId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddTeamMemberByInviteId")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddTeamMemberByInviteId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AddTeamMemberByInviteId(inviteId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AddTeamMemberByToken(userId string, tokenId string) (*model.TeamMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddTeamMemberByToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddTeamMemberByToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddTeamMemberByToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddTeamMemberByToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AddTeamMemberByToken(userId, tokenId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AddTeamMembers(teamId string, userIds []string, userRequestorId string, graceful bool) ([]*model.TeamMemberWithError, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddTeamMembers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddTeamMembers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddTeamMembers")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddTeamMembers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AddTeamMembers(teamId, userIds, userRequestorId, graceful)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AddUserToChannel(user *model.User, channel *model.Channel) (*model.ChannelMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddUserToChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddUserToChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddUserToChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddUserToChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AddUserToChannel(user, channel)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AddUserToTeam(teamId string, userId string, userRequestorId string) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddUserToTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddUserToTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddUserToTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddUserToTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AddUserToTeam(teamId, userId, userRequestorId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AddUserToTeamByInviteId(inviteId string, userId string) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddUserToTeamByInviteId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddUserToTeamByInviteId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddUserToTeamByInviteId")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddUserToTeamByInviteId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AddUserToTeamByInviteId(inviteId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AddUserToTeamByTeamId(teamId string, user *model.User) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.AddUserToTeamByTeamId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddUserToTeamByTeamId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddUserToTeamByTeamId")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddUserToTeamByTeamId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.AddUserToTeamByTeamId(teamId, user)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) AddUserToTeamByToken(userId string, tokenId string) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AddUserToTeamByToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AddUserToTeamByToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AddUserToTeamByToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.AddUserToTeamByToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AddUserToTeamByToken(userId, tokenId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AdjustImage(file io.Reader) (*bytes.Buffer, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AdjustImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AdjustImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AdjustImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.AdjustImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AdjustImage(file)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AllowOAuthAppAccessToUser(userId string, authRequest *model.AuthorizeRequest) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AllowOAuthAppAccessToUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AllowOAuthAppAccessToUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AllowOAuthAppAccessToUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.AllowOAuthAppAccessToUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AllowOAuthAppAccessToUser(userId, authRequest)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AsymmetricSigningKey() *ecdsa.PrivateKey {
	origCtx := a.ctx
	a.log.Info("nr.app.AsymmetricSigningKey")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AsymmetricSigningKey")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AsymmetricSigningKey")
	segment := newrelic.StartSegment(nrtx, "nr.app.AsymmetricSigningKey")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.AsymmetricSigningKey()

	return resultVar0
}

func (a *OpenTracingAppLayer) AttachDeviceId(sessionId string, deviceId string, expiresAt int64) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.AttachDeviceId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AttachDeviceId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AttachDeviceId")
	segment := newrelic.StartSegment(nrtx, "nr.app.AttachDeviceId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.AttachDeviceId(sessionId, deviceId, expiresAt)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) AttachSessionCookies(w http.ResponseWriter, r *http.Request) {
	origCtx := a.ctx
	a.log.Info("nr.app.AttachSessionCookies")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AttachSessionCookies")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AttachSessionCookies")
	segment := newrelic.StartSegment(nrtx, "nr.app.AttachSessionCookies")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.AttachSessionCookies(w, r)
}

func (a *OpenTracingAppLayer) AuthenticateUserForLogin(id string, loginId string, password string, mfaToken string, ldapOnly bool) (user *model.User, err *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AuthenticateUserForLogin")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AuthenticateUserForLogin")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AuthenticateUserForLogin")
	segment := newrelic.StartSegment(nrtx, "nr.app.AuthenticateUserForLogin")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AuthenticateUserForLogin(id, loginId, password, mfaToken, ldapOnly)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AuthorizeOAuthUser(w http.ResponseWriter, r *http.Request, service string, code string, state string, redirectUri string) (io.ReadCloser, string, map[string]string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AuthorizeOAuthUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AuthorizeOAuthUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AuthorizeOAuthUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.AuthorizeOAuthUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2, resultVar3 := a.app.AuthorizeOAuthUser(w, r, service, code, state, redirectUri)

	if resultVar3 != nil {
		span.LogFields(spanlog.Error(resultVar3))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2, resultVar3
}

func (a *OpenTracingAppLayer) AutocompleteChannels(teamId string, term string) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AutocompleteChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AutocompleteChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AutocompleteChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.AutocompleteChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AutocompleteChannels(teamId, term)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AutocompleteChannelsForSearch(teamId string, userId string, term string) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AutocompleteChannelsForSearch")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AutocompleteChannelsForSearch")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AutocompleteChannelsForSearch")
	segment := newrelic.StartSegment(nrtx, "nr.app.AutocompleteChannelsForSearch")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AutocompleteChannelsForSearch(teamId, userId, term)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AutocompleteUsersInChannel(teamId string, channelId string, term string, options *model.UserSearchOptions) (*model.UserAutocompleteInChannel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AutocompleteUsersInChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AutocompleteUsersInChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AutocompleteUsersInChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.AutocompleteUsersInChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AutocompleteUsersInChannel(teamId, channelId, term, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) AutocompleteUsersInTeam(teamId string, term string, options *model.UserSearchOptions) (*model.UserAutocompleteInTeam, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.AutocompleteUsersInTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.AutocompleteUsersInTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.AutocompleteUsersInTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.AutocompleteUsersInTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.AutocompleteUsersInTeam(teamId, term, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) BroadcastStatus(status *model.Status) {
	origCtx := a.ctx
	a.log.Info("nr.app.BroadcastStatus")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.BroadcastStatus")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.BroadcastStatus")
	segment := newrelic.StartSegment(nrtx, "nr.app.BroadcastStatus")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.BroadcastStatus(status)
}

func (a *OpenTracingAppLayer) BuildPostReactions(postId string) (*[]app.ReactionImportData, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.BuildPostReactions")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.BuildPostReactions")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.BuildPostReactions")
	segment := newrelic.StartSegment(nrtx, "nr.app.BuildPostReactions")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.BuildPostReactions(postId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) BuildPushNotificationMessage(contentsConfig string, post *model.Post, user *model.User, channel *model.Channel, channelName string, senderName string, explicitMention bool, channelWideMention bool, replyToThreadType string) (*model.PushNotification, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.BuildPushNotificationMessage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.BuildPushNotificationMessage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.BuildPushNotificationMessage")
	segment := newrelic.StartSegment(nrtx, "nr.app.BuildPushNotificationMessage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.BuildPushNotificationMessage(contentsConfig, post, user, channel, channelName, senderName, explicitMention, channelWideMention, replyToThreadType)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) BuildSamlMetadataObject(idpMetadata []byte) (*model.SamlMetadataResponse, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.BuildSamlMetadataObject")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.BuildSamlMetadataObject")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.BuildSamlMetadataObject")
	segment := newrelic.StartSegment(nrtx, "nr.app.BuildSamlMetadataObject")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.BuildSamlMetadataObject(idpMetadata)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) BulkExport(writer io.Writer, file string, pathToEmojiDir string, dirNameToExportEmoji string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.BulkExport")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.BulkExport")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.BulkExport")
	segment := newrelic.StartSegment(nrtx, "nr.app.BulkExport")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.BulkExport(writer, file, pathToEmojiDir, dirNameToExportEmoji)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) BulkImport(fileReader io.Reader, dryRun bool, workers int) (*model.AppError, int) {
	origCtx := a.ctx
	a.log.Info("nr.app.BulkImport")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.BulkImport")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.BulkImport")
	segment := newrelic.StartSegment(nrtx, "nr.app.BulkImport")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.BulkImport(fileReader, dryRun, workers)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CancelJob(jobId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.CancelJob")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CancelJob")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CancelJob")
	segment := newrelic.StartSegment(nrtx, "nr.app.CancelJob")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.CancelJob(jobId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) ChannelMembersMinusGroupMembers(channelID string, groupIDs []string, page int, perPage int) ([]*model.UserWithGroups, int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ChannelMembersMinusGroupMembers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ChannelMembersMinusGroupMembers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ChannelMembersMinusGroupMembers")
	segment := newrelic.StartSegment(nrtx, "nr.app.ChannelMembersMinusGroupMembers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.ChannelMembersMinusGroupMembers(channelID, groupIDs, page, perPage)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) ChannelMembersToAdd(since int64, channelID *string) ([]*model.UserChannelIDPair, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ChannelMembersToAdd")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ChannelMembersToAdd")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ChannelMembersToAdd")
	segment := newrelic.StartSegment(nrtx, "nr.app.ChannelMembersToAdd")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ChannelMembersToAdd(since, channelID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) ChannelMembersToRemove(teamID *string) ([]*model.ChannelMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ChannelMembersToRemove")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ChannelMembersToRemove")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ChannelMembersToRemove")
	segment := newrelic.StartSegment(nrtx, "nr.app.ChannelMembersToRemove")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ChannelMembersToRemove(teamID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CheckForClientSideCert(r *http.Request) (string, string, string) {
	origCtx := a.ctx
	a.log.Info("nr.app.CheckForClientSideCert")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CheckForClientSideCert")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CheckForClientSideCert")
	segment := newrelic.StartSegment(nrtx, "nr.app.CheckForClientSideCert")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.CheckForClientSideCert(r)

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) CheckPasswordAndAllCriteria(user *model.User, password string, mfaToken string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.CheckPasswordAndAllCriteria")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CheckPasswordAndAllCriteria")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CheckPasswordAndAllCriteria")
	segment := newrelic.StartSegment(nrtx, "nr.app.CheckPasswordAndAllCriteria")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.CheckPasswordAndAllCriteria(user, password, mfaToken)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) CheckRolesExist(roleNames []string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.CheckRolesExist")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CheckRolesExist")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CheckRolesExist")
	segment := newrelic.StartSegment(nrtx, "nr.app.CheckRolesExist")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.CheckRolesExist(roleNames)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) CheckUserAllAuthenticationCriteria(user *model.User, mfaToken string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.CheckUserAllAuthenticationCriteria")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CheckUserAllAuthenticationCriteria")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CheckUserAllAuthenticationCriteria")
	segment := newrelic.StartSegment(nrtx, "nr.app.CheckUserAllAuthenticationCriteria")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.CheckUserAllAuthenticationCriteria(user, mfaToken)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) CheckUserMfa(user *model.User, token string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.CheckUserMfa")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CheckUserMfa")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CheckUserMfa")
	segment := newrelic.StartSegment(nrtx, "nr.app.CheckUserMfa")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.CheckUserMfa(user, token)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) CheckUserPostflightAuthenticationCriteria(user *model.User) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.CheckUserPostflightAuthenticationCriteria")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CheckUserPostflightAuthenticationCriteria")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CheckUserPostflightAuthenticationCriteria")
	segment := newrelic.StartSegment(nrtx, "nr.app.CheckUserPostflightAuthenticationCriteria")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.CheckUserPostflightAuthenticationCriteria(user)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) CheckUserPreflightAuthenticationCriteria(user *model.User, mfaToken string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.CheckUserPreflightAuthenticationCriteria")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CheckUserPreflightAuthenticationCriteria")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CheckUserPreflightAuthenticationCriteria")
	segment := newrelic.StartSegment(nrtx, "nr.app.CheckUserPreflightAuthenticationCriteria")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.CheckUserPreflightAuthenticationCriteria(user, mfaToken)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) CheckValidDomains(team *model.Team) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.CheckValidDomains")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CheckValidDomains")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CheckValidDomains")
	segment := newrelic.StartSegment(nrtx, "nr.app.CheckValidDomains")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.CheckValidDomains(team)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) ClearChannelMembersCache(channelID string) {
	origCtx := a.ctx
	a.log.Info("nr.app.ClearChannelMembersCache")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ClearChannelMembersCache")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ClearChannelMembersCache")
	segment := newrelic.StartSegment(nrtx, "nr.app.ClearChannelMembersCache")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.ClearChannelMembersCache(channelID)
}

func (a *OpenTracingAppLayer) ClearSessionCacheForAllUsers() {
	origCtx := a.ctx
	a.log.Info("nr.app.ClearSessionCacheForAllUsers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ClearSessionCacheForAllUsers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ClearSessionCacheForAllUsers")
	segment := newrelic.StartSegment(nrtx, "nr.app.ClearSessionCacheForAllUsers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.ClearSessionCacheForAllUsers()
}

func (a *OpenTracingAppLayer) ClearSessionCacheForAllUsersSkipClusterSend() {
	origCtx := a.ctx
	a.log.Info("nr.app.ClearSessionCacheForAllUsersSkipClusterSend")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ClearSessionCacheForAllUsersSkipClusterSend")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ClearSessionCacheForAllUsersSkipClusterSend")
	segment := newrelic.StartSegment(nrtx, "nr.app.ClearSessionCacheForAllUsersSkipClusterSend")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.ClearSessionCacheForAllUsersSkipClusterSend()
}

func (a *OpenTracingAppLayer) ClearSessionCacheForUser(userId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.ClearSessionCacheForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ClearSessionCacheForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ClearSessionCacheForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.ClearSessionCacheForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.ClearSessionCacheForUser(userId)
}

func (a *OpenTracingAppLayer) ClearSessionCacheForUserSkipClusterSend(userId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.ClearSessionCacheForUserSkipClusterSend")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ClearSessionCacheForUserSkipClusterSend")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ClearSessionCacheForUserSkipClusterSend")
	segment := newrelic.StartSegment(nrtx, "nr.app.ClearSessionCacheForUserSkipClusterSend")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.ClearSessionCacheForUserSkipClusterSend(userId)
}

func (a *OpenTracingAppLayer) ClearTeamMembersCache(teamID string) {
	origCtx := a.ctx
	a.log.Info("nr.app.ClearTeamMembersCache")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ClearTeamMembersCache")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ClearTeamMembersCache")
	segment := newrelic.StartSegment(nrtx, "nr.app.ClearTeamMembersCache")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.ClearTeamMembersCache(teamID)
}

func (a *OpenTracingAppLayer) ClientConfig() map[string]string {
	origCtx := a.ctx
	a.log.Info("nr.app.ClientConfig")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ClientConfig")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ClientConfig")
	segment := newrelic.StartSegment(nrtx, "nr.app.ClientConfig")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ClientConfig()

	return resultVar0
}

func (a *OpenTracingAppLayer) ClientConfigHash() string {
	origCtx := a.ctx
	a.log.Info("nr.app.ClientConfigHash")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ClientConfigHash")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ClientConfigHash")
	segment := newrelic.StartSegment(nrtx, "nr.app.ClientConfigHash")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ClientConfigHash()

	return resultVar0
}

func (a *OpenTracingAppLayer) ClientConfigWithComputed() map[string]string {
	origCtx := a.ctx
	a.log.Info("nr.app.ClientConfigWithComputed")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ClientConfigWithComputed")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ClientConfigWithComputed")
	segment := newrelic.StartSegment(nrtx, "nr.app.ClientConfigWithComputed")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ClientConfigWithComputed()

	return resultVar0
}

func (a *OpenTracingAppLayer) CompareAndDeletePluginKey(pluginId string, key string, oldValue []byte) (bool, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CompareAndDeletePluginKey")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CompareAndDeletePluginKey")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CompareAndDeletePluginKey")
	segment := newrelic.StartSegment(nrtx, "nr.app.CompareAndDeletePluginKey")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CompareAndDeletePluginKey(pluginId, key, oldValue)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CompareAndSetPluginKey(pluginId string, key string, oldValue []byte, newValue []byte) (bool, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CompareAndSetPluginKey")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CompareAndSetPluginKey")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CompareAndSetPluginKey")
	segment := newrelic.StartSegment(nrtx, "nr.app.CompareAndSetPluginKey")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CompareAndSetPluginKey(pluginId, key, oldValue, newValue)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CompleteOAuth(service string, body io.ReadCloser, teamId string, props map[string]string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CompleteOAuth")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CompleteOAuth")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CompleteOAuth")
	segment := newrelic.StartSegment(nrtx, "nr.app.CompleteOAuth")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CompleteOAuth(service, body, teamId, props)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CompleteSwitchWithOAuth(service string, userData io.Reader, email string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CompleteSwitchWithOAuth")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CompleteSwitchWithOAuth")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CompleteSwitchWithOAuth")
	segment := newrelic.StartSegment(nrtx, "nr.app.CompleteSwitchWithOAuth")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CompleteSwitchWithOAuth(service, userData, email)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) Config() *model.Config {
	origCtx := a.ctx
	a.log.Info("nr.app.Config")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.Config")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.Config")
	segment := newrelic.StartSegment(nrtx, "nr.app.Config")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.Config()

	return resultVar0
}

func (a *OpenTracingAppLayer) ConvertBotToUser(bot *model.Bot, userPatch *model.UserPatch, sysadmin bool) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ConvertBotToUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ConvertBotToUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ConvertBotToUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.ConvertBotToUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ConvertBotToUser(bot, userPatch, sysadmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) ConvertUserToBot(user *model.User) (*model.Bot, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ConvertUserToBot")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ConvertUserToBot")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ConvertUserToBot")
	segment := newrelic.StartSegment(nrtx, "nr.app.ConvertUserToBot")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ConvertUserToBot(user)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CopyFileInfos(userId string, fileIds []string) ([]string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CopyFileInfos")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CopyFileInfos")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CopyFileInfos")
	segment := newrelic.StartSegment(nrtx, "nr.app.CopyFileInfos")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CopyFileInfos(userId, fileIds)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateBot(bot *model.Bot) (*model.Bot, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateBot")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateBot")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateBot")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateBot")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateBot(bot)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateChannel(channel *model.Channel, addMember bool) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateChannel(channel, addMember)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateChannelScheme(channel *model.Channel) (*model.Scheme, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateChannelScheme")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateChannelScheme")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateChannelScheme")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateChannelScheme")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateChannelScheme(channel)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateChannelWithUser(channel *model.Channel, userId string) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateChannelWithUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateChannelWithUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateChannelWithUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateChannelWithUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateChannelWithUser(channel, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateCommand(cmd *model.Command) (*model.Command, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateCommand")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateCommand")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateCommand")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateCommand")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateCommand(cmd)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateCommandPost(post *model.Post, teamId string, response *model.CommandResponse, skipSlackParsing bool) (*model.Post, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateCommandPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateCommandPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateCommandPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateCommandPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	span.SetTag("teamId", teamId)

	span.SetTag("skipSlackParsing", skipSlackParsing)

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateCommandPost(post, teamId, response, skipSlackParsing)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateCommandWebhook(commandId string, args *model.CommandArgs) (*model.CommandWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateCommandWebhook")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateCommandWebhook")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateCommandWebhook")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateCommandWebhook")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateCommandWebhook(commandId, args)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateDefaultChannels(teamID string) ([]*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateDefaultChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateDefaultChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateDefaultChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateDefaultChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateDefaultChannels(teamID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateDefaultMemberships(since int64) error {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateDefaultMemberships")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateDefaultMemberships")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateDefaultMemberships")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateDefaultMemberships")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.CreateDefaultMemberships(since)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) CreateEmoji(sessionUserId string, emoji *model.Emoji, multiPartImageData *multipart.Form) (*model.Emoji, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateEmoji")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateEmoji")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateEmoji")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateEmoji")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateEmoji(sessionUserId, emoji, multiPartImageData)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateGroup(group *model.Group) (*model.Group, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateGroup")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateGroup")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateGroup")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateGroup")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateGroup(group)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateGroupChannel(userIds []string, creatorId string) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateGroupChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateGroupChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateGroupChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateGroupChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateGroupChannel(userIds, creatorId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateGuest(user *model.User) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateGuest")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateGuest")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateGuest")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateGuest")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateGuest(user)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateIncomingWebhookForChannel(creatorId string, channel *model.Channel, hook *model.IncomingWebhook) (*model.IncomingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateIncomingWebhookForChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateIncomingWebhookForChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateIncomingWebhookForChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateIncomingWebhookForChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateIncomingWebhookForChannel(creatorId, channel, hook)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateJob(job *model.Job) (*model.Job, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateJob")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateJob")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateJob")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateJob")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateJob(job)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateOAuthApp(app *model.OAuthApp) (*model.OAuthApp, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateOAuthApp")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateOAuthApp")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateOAuthApp")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateOAuthApp")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateOAuthApp(app)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateOAuthStateToken(extra string) (*model.Token, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateOAuthStateToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateOAuthStateToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateOAuthStateToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateOAuthStateToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateOAuthStateToken(extra)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateOAuthUser(service string, userData io.Reader, teamId string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateOAuthUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateOAuthUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateOAuthUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateOAuthUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateOAuthUser(service, userData, teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateOutgoingWebhook(hook *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateOutgoingWebhook")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateOutgoingWebhook")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateOutgoingWebhook")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateOutgoingWebhook")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateOutgoingWebhook(hook)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreatePasswordRecoveryToken(userId string, email string) (*model.Token, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreatePasswordRecoveryToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreatePasswordRecoveryToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreatePasswordRecoveryToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreatePasswordRecoveryToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreatePasswordRecoveryToken(userId, email)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreatePost(post *model.Post, channel *model.Channel, triggerWebhooks bool, setOnline bool) (savedPost *model.Post, err *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreatePost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreatePost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreatePost")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreatePost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreatePost(post, channel, triggerWebhooks, setOnline)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreatePostAsUser(post *model.Post, currentSessionId string, setOnline bool) (*model.Post, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreatePostAsUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreatePostAsUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreatePostAsUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreatePostAsUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreatePostAsUser(post, currentSessionId, setOnline)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreatePostMissingChannel(post *model.Post, triggerWebhooks bool) (*model.Post, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreatePostMissingChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreatePostMissingChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreatePostMissingChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreatePostMissingChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreatePostMissingChannel(post, triggerWebhooks)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateRole(role *model.Role) (*model.Role, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateRole")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateRole")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateRole")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateRole")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateRole(role)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateScheme(scheme *model.Scheme) (*model.Scheme, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateScheme")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateScheme")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateScheme")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateScheme")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateScheme(scheme)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateSession(session *model.Session) (*model.Session, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateSession")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateSession")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateSession")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateSession")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateSession(session)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateSidebarCategory(userId string, teamId string, newCategory *model.SidebarCategoryWithChannels) (*model.SidebarCategoryWithChannels, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateSidebarCategory")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateSidebarCategory")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateSidebarCategory")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateSidebarCategory")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateSidebarCategory(userId, teamId, newCategory)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateTeam(team *model.Team) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateTeam(team)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateTeamWithUser(team *model.Team, userId string) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateTeamWithUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateTeamWithUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateTeamWithUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateTeamWithUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateTeamWithUser(team, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateTermsOfService(text string, userId string) (*model.TermsOfService, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateTermsOfService")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateTermsOfService")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateTermsOfService")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateTermsOfService")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateTermsOfService(text, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateUser(user *model.User) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateUser(user)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateUserAccessToken(token *model.UserAccessToken) (*model.UserAccessToken, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateUserAccessToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateUserAccessToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateUserAccessToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateUserAccessToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateUserAccessToken(token)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateUserAsAdmin(user *model.User, redirect string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateUserAsAdmin")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateUserAsAdmin")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateUserAsAdmin")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateUserAsAdmin")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateUserAsAdmin(user, redirect)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateUserFromSignup(user *model.User, redirect string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateUserFromSignup")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateUserFromSignup")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateUserFromSignup")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateUserFromSignup")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateUserFromSignup(user, redirect)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateUserWithInviteId(user *model.User, inviteId string, redirect string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateUserWithInviteId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateUserWithInviteId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateUserWithInviteId")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateUserWithInviteId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateUserWithInviteId(user, inviteId, redirect)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateUserWithToken(user *model.User, token *model.Token) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateUserWithToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateUserWithToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateUserWithToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateUserWithToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateUserWithToken(user, token)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) CreateWebhookPost(userId string, channel *model.Channel, text string, overrideUsername string, overrideIconUrl string, overrideIconEmoji string, props model.StringInterface, postType string, postRootId string) (*model.Post, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.CreateWebhookPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.CreateWebhookPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.CreateWebhookPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.CreateWebhookPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.CreateWebhookPost(userId, channel, text, overrideUsername, overrideIconUrl, overrideIconEmoji, props, postType, postRootId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DeactivateGuests() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeactivateGuests")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeactivateGuests")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeactivateGuests")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeactivateGuests")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeactivateGuests()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeactivateMfa(userId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeactivateMfa")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeactivateMfa")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeactivateMfa")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeactivateMfa")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeactivateMfa(userId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeauthorizeOAuthAppForUser(userId string, appId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeauthorizeOAuthAppForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeauthorizeOAuthAppForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeauthorizeOAuthAppForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeauthorizeOAuthAppForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeauthorizeOAuthAppForUser(userId, appId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DefaultChannelNames() []string {
	origCtx := a.ctx
	a.log.Info("nr.app.DefaultChannelNames")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DefaultChannelNames")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DefaultChannelNames")
	segment := newrelic.StartSegment(nrtx, "nr.app.DefaultChannelNames")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DefaultChannelNames()

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteAllExpiredPluginKeys() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteAllExpiredPluginKeys")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteAllExpiredPluginKeys")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteAllExpiredPluginKeys")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteAllExpiredPluginKeys")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteAllExpiredPluginKeys()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteAllKeysForPlugin(pluginId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteAllKeysForPlugin")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteAllKeysForPlugin")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteAllKeysForPlugin")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteAllKeysForPlugin")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteAllKeysForPlugin(pluginId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteBotIconImage(botUserId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteBotIconImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteBotIconImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteBotIconImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteBotIconImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteBotIconImage(botUserId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteBrandImage() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteBrandImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteBrandImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteBrandImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteBrandImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteBrandImage()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteChannel(channel *model.Channel, userId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteChannel(channel, userId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteChannelScheme(channel *model.Channel) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteChannelScheme")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteChannelScheme")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteChannelScheme")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteChannelScheme")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DeleteChannelScheme(channel)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DeleteCommand(commandId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteCommand")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteCommand")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteCommand")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteCommand")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteCommand(commandId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteEmoji(emoji *model.Emoji) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteEmoji")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteEmoji")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteEmoji")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteEmoji")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteEmoji(emoji)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteEphemeralPost(userId string, postId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteEphemeralPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteEphemeralPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteEphemeralPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteEphemeralPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.DeleteEphemeralPost(userId, postId)
}

func (a *OpenTracingAppLayer) DeleteFlaggedPosts(postId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteFlaggedPosts")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteFlaggedPosts")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteFlaggedPosts")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteFlaggedPosts")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.DeleteFlaggedPosts(postId)
}

func (a *OpenTracingAppLayer) DeleteGroup(groupID string) (*model.Group, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteGroup")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteGroup")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteGroup")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteGroup")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DeleteGroup(groupID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DeleteGroupConstrainedMemberships() error {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteGroupConstrainedMemberships")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteGroupConstrainedMemberships")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteGroupConstrainedMemberships")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteGroupConstrainedMemberships")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteGroupConstrainedMemberships()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteGroupMember(groupID string, userID string) (*model.GroupMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteGroupMember")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteGroupMember")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteGroupMember")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteGroupMember")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DeleteGroupMember(groupID, userID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DeleteGroupSyncable(groupID string, syncableID string, syncableType model.GroupSyncableType) (*model.GroupSyncable, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteGroupSyncable")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteGroupSyncable")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteGroupSyncable")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteGroupSyncable")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DeleteGroupSyncable(groupID, syncableID, syncableType)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DeleteIncomingWebhook(hookId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteIncomingWebhook")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteIncomingWebhook")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteIncomingWebhook")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteIncomingWebhook")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteIncomingWebhook(hookId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteOAuthApp(appId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteOAuthApp")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteOAuthApp")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteOAuthApp")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteOAuthApp")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteOAuthApp(appId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteOutgoingWebhook(hookId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteOutgoingWebhook")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteOutgoingWebhook")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteOutgoingWebhook")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteOutgoingWebhook")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteOutgoingWebhook(hookId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeletePluginKey(pluginId string, key string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeletePluginKey")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeletePluginKey")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeletePluginKey")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeletePluginKey")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeletePluginKey(pluginId, key)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeletePost(postId string, deleteByID string) (*model.Post, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DeletePost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeletePost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeletePost")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeletePost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DeletePost(postId, deleteByID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DeletePostFiles(post *model.Post) {
	origCtx := a.ctx
	a.log.Info("nr.app.DeletePostFiles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeletePostFiles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeletePostFiles")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeletePostFiles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.DeletePostFiles(post)
}

func (a *OpenTracingAppLayer) DeletePreferences(userId string, preferences model.Preferences) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeletePreferences")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeletePreferences")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeletePreferences")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeletePreferences")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeletePreferences(userId, preferences)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeletePublicKey(name string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeletePublicKey")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeletePublicKey")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeletePublicKey")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeletePublicKey")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeletePublicKey(name)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteReactionForPost(reaction *model.Reaction) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteReactionForPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteReactionForPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteReactionForPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteReactionForPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteReactionForPost(reaction)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteScheme(schemeId string) (*model.Scheme, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteScheme")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteScheme")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteScheme")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteScheme")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DeleteScheme(schemeId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DeleteSidebarCategory(userId string, teamId string, categoryId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteSidebarCategory")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteSidebarCategory")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteSidebarCategory")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteSidebarCategory")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteSidebarCategory(userId, teamId, categoryId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DeleteToken(token *model.Token) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DeleteToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DeleteToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DeleteToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.DeleteToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DeleteToken(token)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DemoteUserToGuest(user *model.User) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DemoteUserToGuest")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DemoteUserToGuest")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DemoteUserToGuest")
	segment := newrelic.StartSegment(nrtx, "nr.app.DemoteUserToGuest")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DemoteUserToGuest(user)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DiagnosticId() string {
	origCtx := a.ctx
	a.log.Info("nr.app.DiagnosticId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DiagnosticId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DiagnosticId")
	segment := newrelic.StartSegment(nrtx, "nr.app.DiagnosticId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DiagnosticId()

	return resultVar0
}

func (a *OpenTracingAppLayer) DisableAutoResponder(userId string, asAdmin bool) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DisableAutoResponder")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DisableAutoResponder")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DisableAutoResponder")
	segment := newrelic.StartSegment(nrtx, "nr.app.DisableAutoResponder")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DisableAutoResponder(userId, asAdmin)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DisablePlugin(id string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DisablePlugin")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DisablePlugin")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DisablePlugin")
	segment := newrelic.StartSegment(nrtx, "nr.app.DisablePlugin")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DisablePlugin(id)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DisableUserAccessToken(token *model.UserAccessToken) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DisableUserAccessToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DisableUserAccessToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DisableUserAccessToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.DisableUserAccessToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DisableUserAccessToken(token)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DoActionRequest(rawURL string, body []byte) (*http.Response, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DoActionRequest")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoActionRequest")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoActionRequest")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoActionRequest")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DoActionRequest(rawURL, body)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DoAdvancedPermissionsMigration() {
	origCtx := a.ctx
	a.log.Info("nr.app.DoAdvancedPermissionsMigration")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoAdvancedPermissionsMigration")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoAdvancedPermissionsMigration")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoAdvancedPermissionsMigration")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.DoAdvancedPermissionsMigration()
}

func (a *OpenTracingAppLayer) DoAppMigrations() {
	origCtx := a.ctx
	a.log.Info("nr.app.DoAppMigrations")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoAppMigrations")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoAppMigrations")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoAppMigrations")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.DoAppMigrations()
}

func (a *OpenTracingAppLayer) DoCommandRequest(cmd *model.Command, p url.Values) (*model.Command, *model.CommandResponse, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DoCommandRequest")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoCommandRequest")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoCommandRequest")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoCommandRequest")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.DoCommandRequest(cmd, p)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) DoEmojisPermissionsMigration() {
	origCtx := a.ctx
	a.log.Info("nr.app.DoEmojisPermissionsMigration")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoEmojisPermissionsMigration")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoEmojisPermissionsMigration")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoEmojisPermissionsMigration")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.DoEmojisPermissionsMigration()
}

func (a *OpenTracingAppLayer) DoGuestRolesCreationMigration() {
	origCtx := a.ctx
	a.log.Info("nr.app.DoGuestRolesCreationMigration")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoGuestRolesCreationMigration")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoGuestRolesCreationMigration")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoGuestRolesCreationMigration")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.DoGuestRolesCreationMigration()
}

func (a *OpenTracingAppLayer) DoLocalRequest(rawURL string, body []byte) (*http.Response, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DoLocalRequest")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoLocalRequest")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoLocalRequest")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoLocalRequest")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DoLocalRequest(rawURL, body)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DoLogin(w http.ResponseWriter, r *http.Request, user *model.User, deviceId string, isMobile bool, isOAuthUser bool, isSaml bool) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DoLogin")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoLogin")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoLogin")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoLogin")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DoLogin(w, r, user, deviceId, isMobile, isOAuthUser, isSaml)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DoPermissionsMigrations() error {
	origCtx := a.ctx
	a.log.Info("nr.app.DoPermissionsMigrations")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoPermissionsMigrations")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoPermissionsMigrations")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoPermissionsMigrations")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DoPermissionsMigrations()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DoPostAction(postId string, actionId string, userId string, selectedOption string) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DoPostAction")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoPostAction")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoPostAction")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoPostAction")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DoPostAction(postId, actionId, userId, selectedOption)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DoPostActionWithCookie(postId string, actionId string, userId string, selectedOption string, cookie *model.PostActionCookie) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DoPostActionWithCookie")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoPostActionWithCookie")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoPostActionWithCookie")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoPostActionWithCookie")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DoPostActionWithCookie(postId, actionId, userId, selectedOption, cookie)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DoSystemConsoleRolesCreationMigration() {
	origCtx := a.ctx
	a.log.Info("nr.app.DoSystemConsoleRolesCreationMigration")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoSystemConsoleRolesCreationMigration")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoSystemConsoleRolesCreationMigration")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoSystemConsoleRolesCreationMigration")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.DoSystemConsoleRolesCreationMigration()
}

func (a *OpenTracingAppLayer) DoUploadFile(now time.Time, rawTeamId string, rawChannelId string, rawUserId string, rawFilename string, data []byte) (*model.FileInfo, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DoUploadFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoUploadFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoUploadFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoUploadFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DoUploadFile(now, rawTeamId, rawChannelId, rawUserId, rawFilename, data)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) DoUploadFileExpectModification(now time.Time, rawTeamId string, rawChannelId string, rawUserId string, rawFilename string, data []byte) (*model.FileInfo, []byte, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.DoUploadFileExpectModification")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoUploadFileExpectModification")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoUploadFileExpectModification")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoUploadFileExpectModification")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.DoUploadFileExpectModification(now, rawTeamId, rawChannelId, rawUserId, rawFilename, data)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) DoubleCheckPassword(user *model.User, password string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.DoubleCheckPassword")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DoubleCheckPassword")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DoubleCheckPassword")
	segment := newrelic.StartSegment(nrtx, "nr.app.DoubleCheckPassword")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.DoubleCheckPassword(user, password)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) DownloadFromURL(downloadURL string) ([]byte, error) {
	origCtx := a.ctx
	a.log.Info("nr.app.DownloadFromURL")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.DownloadFromURL")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.DownloadFromURL")
	segment := newrelic.StartSegment(nrtx, "nr.app.DownloadFromURL")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.DownloadFromURL(downloadURL)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) EnablePlugin(id string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.EnablePlugin")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.EnablePlugin")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.EnablePlugin")
	segment := newrelic.StartSegment(nrtx, "nr.app.EnablePlugin")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.EnablePlugin(id)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) EnableUserAccessToken(token *model.UserAccessToken) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.EnableUserAccessToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.EnableUserAccessToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.EnableUserAccessToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.EnableUserAccessToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.EnableUserAccessToken(token)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) EnvironmentConfig() map[string]interface{} {
	origCtx := a.ctx
	a.log.Info("nr.app.EnvironmentConfig")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.EnvironmentConfig")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.EnvironmentConfig")
	segment := newrelic.StartSegment(nrtx, "nr.app.EnvironmentConfig")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.EnvironmentConfig()

	return resultVar0
}

func (a *OpenTracingAppLayer) ExecuteCommand(args *model.CommandArgs) (*model.CommandResponse, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ExecuteCommand")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ExecuteCommand")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ExecuteCommand")
	segment := newrelic.StartSegment(nrtx, "nr.app.ExecuteCommand")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	span.SetTag("args", args)

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ExecuteCommand(args)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) ExportPermissions(w io.Writer) error {
	origCtx := a.ctx
	a.log.Info("nr.app.ExportPermissions")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ExportPermissions")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ExportPermissions")
	segment := newrelic.StartSegment(nrtx, "nr.app.ExportPermissions")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ExportPermissions(w)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) ExtendSessionExpiryIfNeeded(session *model.Session) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.ExtendSessionExpiryIfNeeded")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ExtendSessionExpiryIfNeeded")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ExtendSessionExpiryIfNeeded")
	segment := newrelic.StartSegment(nrtx, "nr.app.ExtendSessionExpiryIfNeeded")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ExtendSessionExpiryIfNeeded(session)

	return resultVar0
}

func (a *OpenTracingAppLayer) FetchSamlMetadataFromIdp(url string) ([]byte, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.FetchSamlMetadataFromIdp")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.FetchSamlMetadataFromIdp")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.FetchSamlMetadataFromIdp")
	segment := newrelic.StartSegment(nrtx, "nr.app.FetchSamlMetadataFromIdp")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.FetchSamlMetadataFromIdp(url)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) FileBackend() (filesstore.FileBackend, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.FileBackend")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.FileBackend")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.FileBackend")
	segment := newrelic.StartSegment(nrtx, "nr.app.FileBackend")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.FileBackend()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) FileExists(path string) (bool, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.FileExists")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.FileExists")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.FileExists")
	segment := newrelic.StartSegment(nrtx, "nr.app.FileExists")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.FileExists(path)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) FileReader(path string) (filesstore.ReadCloseSeeker, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.FileReader")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.FileReader")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.FileReader")
	segment := newrelic.StartSegment(nrtx, "nr.app.FileReader")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.FileReader(path)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) FillInChannelProps(channel *model.Channel) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.FillInChannelProps")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.FillInChannelProps")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.FillInChannelProps")
	segment := newrelic.StartSegment(nrtx, "nr.app.FillInChannelProps")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.FillInChannelProps(channel)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) FillInChannelsProps(channelList *model.ChannelList) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.FillInChannelsProps")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.FillInChannelsProps")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.FillInChannelsProps")
	segment := newrelic.StartSegment(nrtx, "nr.app.FillInChannelsProps")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.FillInChannelsProps(channelList)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) FillInPostProps(post *model.Post, channel *model.Channel) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.FillInPostProps")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.FillInPostProps")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.FillInPostProps")
	segment := newrelic.StartSegment(nrtx, "nr.app.FillInPostProps")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.FillInPostProps(post, channel)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) FilterNonGroupChannelMembers(userIds []string, channel *model.Channel) ([]string, error) {
	origCtx := a.ctx
	a.log.Info("nr.app.FilterNonGroupChannelMembers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.FilterNonGroupChannelMembers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.FilterNonGroupChannelMembers")
	segment := newrelic.StartSegment(nrtx, "nr.app.FilterNonGroupChannelMembers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.FilterNonGroupChannelMembers(userIds, channel)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) FilterNonGroupTeamMembers(userIds []string, team *model.Team) ([]string, error) {
	origCtx := a.ctx
	a.log.Info("nr.app.FilterNonGroupTeamMembers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.FilterNonGroupTeamMembers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.FilterNonGroupTeamMembers")
	segment := newrelic.StartSegment(nrtx, "nr.app.FilterNonGroupTeamMembers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.FilterNonGroupTeamMembers(userIds, team)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) FilterUsersByVisible(viewer *model.User, otherUsers []*model.User) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.FilterUsersByVisible")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.FilterUsersByVisible")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.FilterUsersByVisible")
	segment := newrelic.StartSegment(nrtx, "nr.app.FilterUsersByVisible")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.FilterUsersByVisible(viewer, otherUsers)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) FindTeamByName(name string) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.FindTeamByName")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.FindTeamByName")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.FindTeamByName")
	segment := newrelic.StartSegment(nrtx, "nr.app.FindTeamByName")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.FindTeamByName(name)

	return resultVar0
}

func (a *OpenTracingAppLayer) GenerateMfaSecret(userId string) (*model.MfaSecret, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GenerateMfaSecret")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GenerateMfaSecret")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GenerateMfaSecret")
	segment := newrelic.StartSegment(nrtx, "nr.app.GenerateMfaSecret")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GenerateMfaSecret(userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GeneratePublicLink(siteURL string, info *model.FileInfo) string {
	origCtx := a.ctx
	a.log.Info("nr.app.GeneratePublicLink")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GeneratePublicLink")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GeneratePublicLink")
	segment := newrelic.StartSegment(nrtx, "nr.app.GeneratePublicLink")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GeneratePublicLink(siteURL, info)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetActivePluginManifests() ([]*model.Manifest, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetActivePluginManifests")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetActivePluginManifests")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetActivePluginManifests")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetActivePluginManifests")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetActivePluginManifests()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllChannels(page int, perPage int, opts model.ChannelSearchOpts) (*model.ChannelListWithTeamData, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllChannels(page, perPage, opts)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllChannelsCount(opts model.ChannelSearchOpts) (int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllChannelsCount")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllChannelsCount")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllChannelsCount")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllChannelsCount")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllChannelsCount(opts)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllLdapGroupsPage(page int, perPage int, opts model.LdapGroupSearchOpts) ([]*model.Group, int, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllLdapGroupsPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllLdapGroupsPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllLdapGroupsPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllLdapGroupsPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.GetAllLdapGroupsPage(page, perPage, opts)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) GetAllPrivateTeams() ([]*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllPrivateTeams")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllPrivateTeams")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllPrivateTeams")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllPrivateTeams")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllPrivateTeams()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllPrivateTeamsPage(offset int, limit int) ([]*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllPrivateTeamsPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllPrivateTeamsPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllPrivateTeamsPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllPrivateTeamsPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllPrivateTeamsPage(offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllPrivateTeamsPageWithCount(offset int, limit int) (*model.TeamsWithCount, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllPrivateTeamsPageWithCount")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllPrivateTeamsPageWithCount")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllPrivateTeamsPageWithCount")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllPrivateTeamsPageWithCount")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllPrivateTeamsPageWithCount(offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllPublicTeams() ([]*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllPublicTeams")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllPublicTeams")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllPublicTeams")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllPublicTeams")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllPublicTeams()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllPublicTeamsPage(offset int, limit int) ([]*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllPublicTeamsPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllPublicTeamsPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllPublicTeamsPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllPublicTeamsPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllPublicTeamsPage(offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllPublicTeamsPageWithCount(offset int, limit int) (*model.TeamsWithCount, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllPublicTeamsPageWithCount")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllPublicTeamsPageWithCount")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllPublicTeamsPageWithCount")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllPublicTeamsPageWithCount")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllPublicTeamsPageWithCount(offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllRoles() ([]*model.Role, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllRoles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllRoles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllRoles")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllRoles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllRoles()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllStatuses() map[string]*model.Status {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllStatuses")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllStatuses")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllStatuses")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllStatuses")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetAllStatuses()

	return resultVar0
}

func (a *OpenTracingAppLayer) GetAllTeams() ([]*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllTeams")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllTeams")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllTeams")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllTeams")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllTeams()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllTeamsPage(offset int, limit int) ([]*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllTeamsPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllTeamsPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllTeamsPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllTeamsPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllTeamsPage(offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAllTeamsPageWithCount(offset int, limit int) (*model.TeamsWithCount, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAllTeamsPageWithCount")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAllTeamsPageWithCount")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAllTeamsPageWithCount")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAllTeamsPageWithCount")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAllTeamsPageWithCount(offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAnalytics(name string, teamId string) (model.AnalyticsRows, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAnalytics")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAnalytics")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAnalytics")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAnalytics")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAnalytics(name, teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAudits(userId string, limit int) (model.Audits, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAudits")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAudits")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAudits")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAudits")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAudits(userId, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAuditsPage(userId string, page int, perPage int) (model.Audits, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAuditsPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAuditsPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAuditsPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAuditsPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAuditsPage(userId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAuthorizationCode(w http.ResponseWriter, r *http.Request, service string, props map[string]string, loginHint string) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAuthorizationCode")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAuthorizationCode")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAuthorizationCode")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAuthorizationCode")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAuthorizationCode(w, r, service, props, loginHint)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetAuthorizedAppsForUser(userId string, page int, perPage int) ([]*model.OAuthApp, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetAuthorizedAppsForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetAuthorizedAppsForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetAuthorizedAppsForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetAuthorizedAppsForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetAuthorizedAppsForUser(userId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetBot(botUserId string, includeDeleted bool) (*model.Bot, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetBot")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetBot")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetBot")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetBot")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetBot(botUserId, includeDeleted)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetBotIconImage(botUserId string) ([]byte, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetBotIconImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetBotIconImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetBotIconImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetBotIconImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetBotIconImage(botUserId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetBots(options *model.BotGetOptions) (model.BotList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetBots")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetBots")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetBots")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetBots")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetBots(options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetBrandImage() ([]byte, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetBrandImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetBrandImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetBrandImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetBrandImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetBrandImage()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetBulkReactionsForPosts(postIds []string) (map[string][]*model.Reaction, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetBulkReactionsForPosts")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetBulkReactionsForPosts")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetBulkReactionsForPosts")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetBulkReactionsForPosts")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetBulkReactionsForPosts(postIds)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannel(channelId string) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannel(channelId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelByName(channelName string, teamId string, includeDeleted bool) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelByName")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelByName")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelByName")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelByName")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelByName(channelName, teamId, includeDeleted)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelByNameForTeamName(channelName string, teamName string, includeDeleted bool) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelByNameForTeamName")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelByNameForTeamName")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelByNameForTeamName")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelByNameForTeamName")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelByNameForTeamName(channelName, teamName, includeDeleted)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelCounts(teamId string, userId string) (*model.ChannelCounts, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelCounts")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelCounts")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelCounts")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelCounts")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelCounts(teamId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelGroupUsers(channelID string) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelGroupUsers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelGroupUsers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelGroupUsers")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelGroupUsers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelGroupUsers(channelID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelGuestCount(channelId string) (int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelGuestCount")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelGuestCount")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelGuestCount")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelGuestCount")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelGuestCount(channelId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelMember(channelId string, userId string) (*model.ChannelMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelMember")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelMember")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelMember")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelMember")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelMember(channelId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelMemberCount(channelId string) (int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelMemberCount")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelMemberCount")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelMemberCount")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelMemberCount")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelMemberCount(channelId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelMembersByIds(channelId string, userIds []string) (*model.ChannelMembers, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelMembersByIds")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelMembersByIds")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelMembersByIds")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelMembersByIds")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelMembersByIds(channelId, userIds)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelMembersForUser(teamId string, userId string) (*model.ChannelMembers, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelMembersForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelMembersForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelMembersForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelMembersForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelMembersForUser(teamId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelMembersForUserWithPagination(teamId string, userId string, page int, perPage int) ([]*model.ChannelMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelMembersForUserWithPagination")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelMembersForUserWithPagination")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelMembersForUserWithPagination")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelMembersForUserWithPagination")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelMembersForUserWithPagination(teamId, userId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelMembersPage(channelId string, page int, perPage int) (*model.ChannelMembers, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelMembersPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelMembersPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelMembersPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelMembersPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelMembersPage(channelId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelMembersTimezones(channelId string) ([]string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelMembersTimezones")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelMembersTimezones")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelMembersTimezones")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelMembersTimezones")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelMembersTimezones(channelId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelModerationsForChannel(channel *model.Channel) ([]*model.ChannelModeration, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelModerationsForChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelModerationsForChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelModerationsForChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelModerationsForChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelModerationsForChannel(channel)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelPinnedPostCount(channelId string) (int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelPinnedPostCount")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelPinnedPostCount")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelPinnedPostCount")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelPinnedPostCount")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelPinnedPostCount(channelId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelUnread(channelId string, userId string) (*model.ChannelUnread, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelUnread")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelUnread")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelUnread")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelUnread")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelUnread(channelId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelsByNames(channelNames []string, teamId string) ([]*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelsByNames")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelsByNames")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelsByNames")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelsByNames")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelsByNames(channelNames, teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelsForScheme(scheme *model.Scheme, offset int, limit int) (model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelsForScheme")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelsForScheme")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelsForScheme")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelsForScheme")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelsForScheme(scheme, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelsForSchemePage(scheme *model.Scheme, page int, perPage int) (model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelsForSchemePage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelsForSchemePage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelsForSchemePage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelsForSchemePage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelsForSchemePage(scheme, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelsForUser(teamId string, userId string, includeDeleted bool, lastDeleteAt int) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelsForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelsForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelsForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelsForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelsForUser(teamId, userId, includeDeleted, lastDeleteAt)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetChannelsUserNotIn(teamId string, userId string, offset int, limit int) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetChannelsUserNotIn")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetChannelsUserNotIn")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetChannelsUserNotIn")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetChannelsUserNotIn")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetChannelsUserNotIn(teamId, userId, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetClusterId() string {
	origCtx := a.ctx
	a.log.Info("nr.app.GetClusterId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetClusterId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetClusterId")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetClusterId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetClusterId()

	return resultVar0
}

func (a *OpenTracingAppLayer) GetClusterPluginStatuses() (model.PluginStatuses, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetClusterPluginStatuses")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetClusterPluginStatuses")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetClusterPluginStatuses")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetClusterPluginStatuses")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetClusterPluginStatuses()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetClusterStatus() []*model.ClusterInfo {
	origCtx := a.ctx
	a.log.Info("nr.app.GetClusterStatus")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetClusterStatus")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetClusterStatus")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetClusterStatus")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetClusterStatus()

	return resultVar0
}

func (a *OpenTracingAppLayer) GetCommand(commandId string) (*model.Command, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetCommand")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetCommand")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetCommand")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetCommand")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetCommand(commandId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetComplianceFile(job *model.Compliance) ([]byte, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetComplianceFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetComplianceFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetComplianceFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetComplianceFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetComplianceFile(job)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetComplianceReport(reportId string) (*model.Compliance, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetComplianceReport")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetComplianceReport")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetComplianceReport")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetComplianceReport")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetComplianceReport(reportId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetComplianceReports(page int, perPage int) (model.Compliances, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetComplianceReports")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetComplianceReports")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetComplianceReports")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetComplianceReports")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetComplianceReports(page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetConfigFile(name string) ([]byte, error) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetConfigFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetConfigFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetConfigFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetConfigFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetConfigFile(name)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetCookieDomain() string {
	origCtx := a.ctx
	a.log.Info("nr.app.GetCookieDomain")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetCookieDomain")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetCookieDomain")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetCookieDomain")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetCookieDomain()

	return resultVar0
}

func (a *OpenTracingAppLayer) GetDataRetentionPolicy() (*model.DataRetentionPolicy, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetDataRetentionPolicy")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetDataRetentionPolicy")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetDataRetentionPolicy")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetDataRetentionPolicy")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetDataRetentionPolicy()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetDefaultProfileImage(user *model.User) ([]byte, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetDefaultProfileImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetDefaultProfileImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetDefaultProfileImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetDefaultProfileImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetDefaultProfileImage(user)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetDeletedChannels(teamId string, offset int, limit int, userId string) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetDeletedChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetDeletedChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetDeletedChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetDeletedChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetDeletedChannels(teamId, offset, limit, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetEmoji(emojiId string) (*model.Emoji, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetEmoji")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetEmoji")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetEmoji")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetEmoji")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetEmoji(emojiId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetEmojiByName(emojiName string) (*model.Emoji, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetEmojiByName")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetEmojiByName")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetEmojiByName")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetEmojiByName")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetEmojiByName(emojiName)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetEmojiImage(emojiId string) ([]byte, string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetEmojiImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetEmojiImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetEmojiImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetEmojiImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.GetEmojiImage(emojiId)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) GetEmojiList(page int, perPage int, sort string) ([]*model.Emoji, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetEmojiList")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetEmojiList")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetEmojiList")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetEmojiList")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetEmojiList(page, perPage, sort)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetEmojiStaticUrl(emojiName string) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetEmojiStaticUrl")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetEmojiStaticUrl")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetEmojiStaticUrl")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetEmojiStaticUrl")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetEmojiStaticUrl(emojiName)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetEnvironmentConfig() map[string]interface{} {
	origCtx := a.ctx
	a.log.Info("nr.app.GetEnvironmentConfig")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetEnvironmentConfig")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetEnvironmentConfig")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetEnvironmentConfig")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetEnvironmentConfig()

	return resultVar0
}

func (a *OpenTracingAppLayer) GetErrorListForEmailsOverLimit(emailList []string, cloudUserLimit int64) ([]string, []*model.EmailInviteWithError, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetErrorListForEmailsOverLimit")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetErrorListForEmailsOverLimit")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetErrorListForEmailsOverLimit")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetErrorListForEmailsOverLimit")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.GetErrorListForEmailsOverLimit(emailList, cloudUserLimit)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) GetFile(fileId string) ([]byte, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetFile(fileId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetFileInfo(fileId string) (*model.FileInfo, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetFileInfo")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetFileInfo")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetFileInfo")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetFileInfo")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetFileInfo(fileId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetFileInfos(page int, perPage int, opt *model.GetFileInfosOptions) ([]*model.FileInfo, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetFileInfos")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetFileInfos")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetFileInfos")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetFileInfos")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetFileInfos(page, perPage, opt)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetFileInfosForPost(postId string, fromMaster bool) ([]*model.FileInfo, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetFileInfosForPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetFileInfosForPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetFileInfosForPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetFileInfosForPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetFileInfosForPost(postId, fromMaster)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetFileInfosForPostWithMigration(postId string) ([]*model.FileInfo, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetFileInfosForPostWithMigration")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetFileInfosForPostWithMigration")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetFileInfosForPostWithMigration")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetFileInfosForPostWithMigration")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetFileInfosForPostWithMigration(postId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetFilteredUsersStats(options *model.UserCountOptions) (*model.UsersStats, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetFilteredUsersStats")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetFilteredUsersStats")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetFilteredUsersStats")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetFilteredUsersStats")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetFilteredUsersStats(options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetFlaggedPosts(userId string, offset int, limit int) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetFlaggedPosts")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetFlaggedPosts")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetFlaggedPosts")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetFlaggedPosts")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetFlaggedPosts(userId, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetFlaggedPostsForChannel(userId string, channelId string, offset int, limit int) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetFlaggedPostsForChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetFlaggedPostsForChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetFlaggedPostsForChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetFlaggedPostsForChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetFlaggedPostsForChannel(userId, channelId, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetFlaggedPostsForTeam(userId string, teamId string, offset int, limit int) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetFlaggedPostsForTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetFlaggedPostsForTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetFlaggedPostsForTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetFlaggedPostsForTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetFlaggedPostsForTeam(userId, teamId, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroup(id string) (*model.Group, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroup")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroup")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroup")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroup")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroup(id)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroupByName(name string, opts model.GroupSearchOpts) (*model.Group, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupByName")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupByName")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupByName")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupByName")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroupByName(name, opts)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroupByRemoteID(remoteID string, groupSource model.GroupSource) (*model.Group, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupByRemoteID")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupByRemoteID")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupByRemoteID")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupByRemoteID")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroupByRemoteID(remoteID, groupSource)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroupChannel(userIds []string) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroupChannel(userIds)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroupMemberCount(groupID string) (int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupMemberCount")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupMemberCount")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupMemberCount")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupMemberCount")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroupMemberCount(groupID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroupMemberUsers(groupID string) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupMemberUsers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupMemberUsers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupMemberUsers")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupMemberUsers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroupMemberUsers(groupID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroupMemberUsersPage(groupID string, page int, perPage int) ([]*model.User, int, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupMemberUsersPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupMemberUsersPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupMemberUsersPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupMemberUsersPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.GetGroupMemberUsersPage(groupID, page, perPage)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) GetGroupSyncable(groupID string, syncableID string, syncableType model.GroupSyncableType) (*model.GroupSyncable, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupSyncable")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupSyncable")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupSyncable")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupSyncable")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroupSyncable(groupID, syncableID, syncableType)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroupSyncables(groupID string, syncableType model.GroupSyncableType) ([]*model.GroupSyncable, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupSyncables")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupSyncables")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupSyncables")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupSyncables")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroupSyncables(groupID, syncableType)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroups(page int, perPage int, opts model.GroupSearchOpts) ([]*model.Group, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroups")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroups")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroups")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroups")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroups(page, perPage, opts)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroupsAssociatedToChannelsByTeam(teamId string, opts model.GroupSearchOpts) (map[string][]*model.GroupWithSchemeAdmin, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupsAssociatedToChannelsByTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupsAssociatedToChannelsByTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupsAssociatedToChannelsByTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupsAssociatedToChannelsByTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroupsAssociatedToChannelsByTeam(teamId, opts)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroupsByChannel(channelId string, opts model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, int, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupsByChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupsByChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupsByChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupsByChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.GetGroupsByChannel(channelId, opts)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) GetGroupsByIDs(groupIDs []string) ([]*model.Group, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupsByIDs")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupsByIDs")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupsByIDs")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupsByIDs")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroupsByIDs(groupIDs)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroupsBySource(groupSource model.GroupSource) ([]*model.Group, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupsBySource")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupsBySource")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupsBySource")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupsBySource")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroupsBySource(groupSource)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetGroupsByTeam(teamId string, opts model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, int, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupsByTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupsByTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupsByTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupsByTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.GetGroupsByTeam(teamId, opts)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) GetGroupsByUserId(userId string) ([]*model.Group, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetGroupsByUserId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetGroupsByUserId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetGroupsByUserId")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetGroupsByUserId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetGroupsByUserId(userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetHubForUserId(userId string) *app.Hub {
	origCtx := a.ctx
	a.log.Info("nr.app.GetHubForUserId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetHubForUserId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetHubForUserId")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetHubForUserId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetHubForUserId(userId)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetIncomingWebhook(hookId string) (*model.IncomingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetIncomingWebhook")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetIncomingWebhook")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetIncomingWebhook")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetIncomingWebhook")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetIncomingWebhook(hookId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetIncomingWebhooksForTeamPage(teamId string, page int, perPage int) ([]*model.IncomingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetIncomingWebhooksForTeamPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetIncomingWebhooksForTeamPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetIncomingWebhooksForTeamPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetIncomingWebhooksForTeamPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetIncomingWebhooksForTeamPage(teamId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetIncomingWebhooksForTeamPageByUser(teamId string, userId string, page int, perPage int) ([]*model.IncomingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetIncomingWebhooksForTeamPageByUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetIncomingWebhooksForTeamPageByUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetIncomingWebhooksForTeamPageByUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetIncomingWebhooksForTeamPageByUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetIncomingWebhooksForTeamPageByUser(teamId, userId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetIncomingWebhooksPage(page int, perPage int) ([]*model.IncomingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetIncomingWebhooksPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetIncomingWebhooksPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetIncomingWebhooksPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetIncomingWebhooksPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetIncomingWebhooksPage(page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetIncomingWebhooksPageByUser(userId string, page int, perPage int) ([]*model.IncomingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetIncomingWebhooksPageByUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetIncomingWebhooksPageByUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetIncomingWebhooksPageByUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetIncomingWebhooksPageByUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetIncomingWebhooksPageByUser(userId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetJob(id string) (*model.Job, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetJob")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetJob")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetJob")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetJob")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetJob(id)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetJobs(offset int, limit int) ([]*model.Job, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetJobs")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetJobs")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetJobs")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetJobs")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetJobs(offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetJobsByType(jobType string, offset int, limit int) ([]*model.Job, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetJobsByType")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetJobsByType")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetJobsByType")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetJobsByType")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetJobsByType(jobType, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetJobsByTypePage(jobType string, page int, perPage int) ([]*model.Job, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetJobsByTypePage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetJobsByTypePage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetJobsByTypePage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetJobsByTypePage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetJobsByTypePage(jobType, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetJobsPage(page int, perPage int) ([]*model.Job, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetJobsPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetJobsPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetJobsPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetJobsPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetJobsPage(page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetKnownUsers(userID string) ([]string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetKnownUsers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetKnownUsers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetKnownUsers")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetKnownUsers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetKnownUsers(userID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetLatestTermsOfService() (*model.TermsOfService, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetLatestTermsOfService")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetLatestTermsOfService")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetLatestTermsOfService")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetLatestTermsOfService")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetLatestTermsOfService()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetLdapGroup(ldapGroupID string) (*model.Group, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetLdapGroup")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetLdapGroup")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetLdapGroup")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetLdapGroup")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetLdapGroup(ldapGroupID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetLogs(page int, perPage int) ([]string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetLogs")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetLogs")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetLogs")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetLogs")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetLogs(page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetLogsSkipSend(page int, perPage int) ([]string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetLogsSkipSend")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetLogsSkipSend")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetLogsSkipSend")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetLogsSkipSend")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetLogsSkipSend(page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetMarketplacePlugins(filter *model.MarketplacePluginFilter) ([]*model.MarketplacePlugin, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetMarketplacePlugins")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetMarketplacePlugins")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetMarketplacePlugins")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetMarketplacePlugins")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetMarketplacePlugins(filter)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetMessageForNotification(post *model.Post, translateFunc i18n.TranslateFunc) string {
	origCtx := a.ctx
	a.log.Info("nr.app.GetMessageForNotification")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetMessageForNotification")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetMessageForNotification")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetMessageForNotification")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetMessageForNotification(post, translateFunc)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetMultipleEmojiByName(names []string) ([]*model.Emoji, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetMultipleEmojiByName")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetMultipleEmojiByName")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetMultipleEmojiByName")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetMultipleEmojiByName")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetMultipleEmojiByName(names)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetNewUsersForTeamPage(teamId string, page int, perPage int, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetNewUsersForTeamPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetNewUsersForTeamPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetNewUsersForTeamPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetNewUsersForTeamPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetNewUsersForTeamPage(teamId, page, perPage, asAdmin, viewRestrictions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetNextPostIdFromPostList(postList *model.PostList) string {
	origCtx := a.ctx
	a.log.Info("nr.app.GetNextPostIdFromPostList")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetNextPostIdFromPostList")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetNextPostIdFromPostList")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetNextPostIdFromPostList")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetNextPostIdFromPostList(postList)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetNotificationNameFormat(user *model.User) string {
	origCtx := a.ctx
	a.log.Info("nr.app.GetNotificationNameFormat")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetNotificationNameFormat")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetNotificationNameFormat")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetNotificationNameFormat")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetNotificationNameFormat(user)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetNumberOfChannelsOnTeam(teamId string) (int, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetNumberOfChannelsOnTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetNumberOfChannelsOnTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetNumberOfChannelsOnTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetNumberOfChannelsOnTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetNumberOfChannelsOnTeam(teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOAuthAccessTokenForCodeFlow(clientId string, grantType string, redirectUri string, code string, secret string, refreshToken string) (*model.AccessResponse, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOAuthAccessTokenForCodeFlow")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOAuthAccessTokenForCodeFlow")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOAuthAccessTokenForCodeFlow")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOAuthAccessTokenForCodeFlow")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOAuthAccessTokenForCodeFlow(clientId, grantType, redirectUri, code, secret, refreshToken)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOAuthAccessTokenForImplicitFlow(userId string, authRequest *model.AuthorizeRequest) (*model.Session, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOAuthAccessTokenForImplicitFlow")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOAuthAccessTokenForImplicitFlow")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOAuthAccessTokenForImplicitFlow")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOAuthAccessTokenForImplicitFlow")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOAuthAccessTokenForImplicitFlow(userId, authRequest)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOAuthApp(appId string) (*model.OAuthApp, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOAuthApp")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOAuthApp")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOAuthApp")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOAuthApp")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOAuthApp(appId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOAuthApps(page int, perPage int) ([]*model.OAuthApp, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOAuthApps")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOAuthApps")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOAuthApps")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOAuthApps")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOAuthApps(page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOAuthAppsByCreator(userId string, page int, perPage int) ([]*model.OAuthApp, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOAuthAppsByCreator")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOAuthAppsByCreator")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOAuthAppsByCreator")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOAuthAppsByCreator")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOAuthAppsByCreator(userId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOAuthCodeRedirect(userId string, authRequest *model.AuthorizeRequest) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOAuthCodeRedirect")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOAuthCodeRedirect")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOAuthCodeRedirect")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOAuthCodeRedirect")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOAuthCodeRedirect(userId, authRequest)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOAuthImplicitRedirect(userId string, authRequest *model.AuthorizeRequest) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOAuthImplicitRedirect")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOAuthImplicitRedirect")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOAuthImplicitRedirect")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOAuthImplicitRedirect")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOAuthImplicitRedirect(userId, authRequest)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOAuthLoginEndpoint(w http.ResponseWriter, r *http.Request, service string, teamId string, action string, redirectTo string, loginHint string, isMobile bool) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOAuthLoginEndpoint")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOAuthLoginEndpoint")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOAuthLoginEndpoint")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOAuthLoginEndpoint")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOAuthLoginEndpoint(w, r, service, teamId, action, redirectTo, loginHint, isMobile)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOAuthSignupEndpoint(w http.ResponseWriter, r *http.Request, service string, teamId string) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOAuthSignupEndpoint")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOAuthSignupEndpoint")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOAuthSignupEndpoint")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOAuthSignupEndpoint")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOAuthSignupEndpoint(w, r, service, teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOAuthStateToken(token string) (*model.Token, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOAuthStateToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOAuthStateToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOAuthStateToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOAuthStateToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOAuthStateToken(token)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOpenGraphMetadata(requestURL string) *opengraph.OpenGraph {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOpenGraphMetadata")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOpenGraphMetadata")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOpenGraphMetadata")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOpenGraphMetadata")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetOpenGraphMetadata(requestURL)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetOrCreateDirectChannel(userId string, otherUserId string) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOrCreateDirectChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOrCreateDirectChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOrCreateDirectChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOrCreateDirectChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOrCreateDirectChannel(userId, otherUserId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOutgoingWebhook(hookId string) (*model.OutgoingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOutgoingWebhook")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOutgoingWebhook")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOutgoingWebhook")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOutgoingWebhook")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOutgoingWebhook(hookId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOutgoingWebhooksForChannelPageByUser(channelId string, userId string, page int, perPage int) ([]*model.OutgoingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOutgoingWebhooksForChannelPageByUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOutgoingWebhooksForChannelPageByUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOutgoingWebhooksForChannelPageByUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOutgoingWebhooksForChannelPageByUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOutgoingWebhooksForChannelPageByUser(channelId, userId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOutgoingWebhooksForTeamPage(teamId string, page int, perPage int) ([]*model.OutgoingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOutgoingWebhooksForTeamPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOutgoingWebhooksForTeamPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOutgoingWebhooksForTeamPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOutgoingWebhooksForTeamPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOutgoingWebhooksForTeamPage(teamId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOutgoingWebhooksForTeamPageByUser(teamId string, userId string, page int, perPage int) ([]*model.OutgoingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOutgoingWebhooksForTeamPageByUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOutgoingWebhooksForTeamPageByUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOutgoingWebhooksForTeamPageByUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOutgoingWebhooksForTeamPageByUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOutgoingWebhooksForTeamPageByUser(teamId, userId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOutgoingWebhooksPage(page int, perPage int) ([]*model.OutgoingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOutgoingWebhooksPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOutgoingWebhooksPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOutgoingWebhooksPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOutgoingWebhooksPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOutgoingWebhooksPage(page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetOutgoingWebhooksPageByUser(userId string, page int, perPage int) ([]*model.OutgoingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetOutgoingWebhooksPageByUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetOutgoingWebhooksPageByUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetOutgoingWebhooksPageByUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetOutgoingWebhooksPageByUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetOutgoingWebhooksPageByUser(userId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPasswordRecoveryToken(token string) (*model.Token, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPasswordRecoveryToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPasswordRecoveryToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPasswordRecoveryToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPasswordRecoveryToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPasswordRecoveryToken(token)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPermalinkPost(postId string, userId string) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPermalinkPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPermalinkPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPermalinkPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPermalinkPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPermalinkPost(postId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPinnedPosts(channelId string) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPinnedPosts")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPinnedPosts")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPinnedPosts")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPinnedPosts")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPinnedPosts(channelId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPluginKey(pluginId string, key string) ([]byte, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPluginKey")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPluginKey")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPluginKey")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPluginKey")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPluginKey(pluginId, key)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPluginPublicKeyFiles() ([]string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPluginPublicKeyFiles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPluginPublicKeyFiles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPluginPublicKeyFiles")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPluginPublicKeyFiles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPluginPublicKeyFiles()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPluginStatus(id string) (*model.PluginStatus, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPluginStatus")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPluginStatus")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPluginStatus")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPluginStatus")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPluginStatus(id)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPluginStatuses() (model.PluginStatuses, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPluginStatuses")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPluginStatuses")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPluginStatuses")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPluginStatuses")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPluginStatuses()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPlugins() (*model.PluginsResponse, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPlugins")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPlugins")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPlugins")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPlugins")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPlugins()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPluginsEnvironment() *plugin.Environment {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPluginsEnvironment")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPluginsEnvironment")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPluginsEnvironment")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPluginsEnvironment")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetPluginsEnvironment()

	return resultVar0
}

func (a *OpenTracingAppLayer) GetPostAfterTime(channelId string, time int64) (*model.Post, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPostAfterTime")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPostAfterTime")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPostAfterTime")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPostAfterTime")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPostAfterTime(channelId, time)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPostIdAfterTime(channelId string, time int64) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPostIdAfterTime")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPostIdAfterTime")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPostIdAfterTime")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPostIdAfterTime")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPostIdAfterTime(channelId, time)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPostIdBeforeTime(channelId string, time int64) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPostIdBeforeTime")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPostIdBeforeTime")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPostIdBeforeTime")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPostIdBeforeTime")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPostIdBeforeTime(channelId, time)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPostThread(postId string, skipFetchThreads bool) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPostThread")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPostThread")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPostThread")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPostThread")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPostThread(postId, skipFetchThreads)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPosts(channelId string, offset int, limit int) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPosts")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPosts")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPosts")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPosts")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPosts(channelId, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPostsAfterPost(options model.GetPostsOptions) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPostsAfterPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPostsAfterPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPostsAfterPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPostsAfterPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPostsAfterPost(options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPostsAroundPost(before bool, options model.GetPostsOptions) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPostsAroundPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPostsAroundPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPostsAroundPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPostsAroundPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPostsAroundPost(before, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPostsBeforePost(options model.GetPostsOptions) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPostsBeforePost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPostsBeforePost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPostsBeforePost")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPostsBeforePost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPostsBeforePost(options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPostsEtag(channelId string) string {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPostsEtag")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPostsEtag")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPostsEtag")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPostsEtag")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetPostsEtag(channelId)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetPostsForChannelAroundLastUnread(channelId string, userId string, limitBefore int, limitAfter int, skipFetchThreads bool) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPostsForChannelAroundLastUnread")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPostsForChannelAroundLastUnread")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPostsForChannelAroundLastUnread")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPostsForChannelAroundLastUnread")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPostsForChannelAroundLastUnread(channelId, userId, limitBefore, limitAfter, skipFetchThreads)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPostsPage(options model.GetPostsOptions) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPostsPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPostsPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPostsPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPostsPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPostsPage(options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPostsSince(options model.GetPostsSinceOptions) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPostsSince")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPostsSince")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPostsSince")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPostsSince")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPostsSince(options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPreferenceByCategoryAndNameForUser(userId string, category string, preferenceName string) (*model.Preference, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPreferenceByCategoryAndNameForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPreferenceByCategoryAndNameForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPreferenceByCategoryAndNameForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPreferenceByCategoryAndNameForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPreferenceByCategoryAndNameForUser(userId, category, preferenceName)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPreferenceByCategoryForUser(userId string, category string) (model.Preferences, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPreferenceByCategoryForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPreferenceByCategoryForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPreferenceByCategoryForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPreferenceByCategoryForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPreferenceByCategoryForUser(userId, category)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPreferencesForUser(userId string) (model.Preferences, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPreferencesForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPreferencesForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPreferencesForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPreferencesForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPreferencesForUser(userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPrevPostIdFromPostList(postList *model.PostList) string {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPrevPostIdFromPostList")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPrevPostIdFromPostList")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPrevPostIdFromPostList")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPrevPostIdFromPostList")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetPrevPostIdFromPostList(postList)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetPrivateChannelsForTeam(teamId string, offset int, limit int) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPrivateChannelsForTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPrivateChannelsForTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPrivateChannelsForTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPrivateChannelsForTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPrivateChannelsForTeam(teamId, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetProfileImage(user *model.User) ([]byte, bool, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetProfileImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetProfileImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetProfileImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetProfileImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.GetProfileImage(user)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) GetPublicChannelsByIdsForTeam(teamId string, channelIds []string) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPublicChannelsByIdsForTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPublicChannelsByIdsForTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPublicChannelsByIdsForTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPublicChannelsByIdsForTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPublicChannelsByIdsForTeam(teamId, channelIds)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPublicChannelsForTeam(teamId string, offset int, limit int) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPublicChannelsForTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPublicChannelsForTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPublicChannelsForTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPublicChannelsForTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPublicChannelsForTeam(teamId, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetPublicKey(name string) ([]byte, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetPublicKey")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetPublicKey")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetPublicKey")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetPublicKey")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetPublicKey(name)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetReactionsForPost(postId string) ([]*model.Reaction, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetReactionsForPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetReactionsForPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetReactionsForPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetReactionsForPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetReactionsForPost(postId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetRecentlyActiveUsersForTeam(teamId string) (map[string]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetRecentlyActiveUsersForTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetRecentlyActiveUsersForTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetRecentlyActiveUsersForTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetRecentlyActiveUsersForTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetRecentlyActiveUsersForTeam(teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetRecentlyActiveUsersForTeamPage(teamId string, page int, perPage int, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetRecentlyActiveUsersForTeamPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetRecentlyActiveUsersForTeamPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetRecentlyActiveUsersForTeamPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetRecentlyActiveUsersForTeamPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetRecentlyActiveUsersForTeamPage(teamId, page, perPage, asAdmin, viewRestrictions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetRole(id string) (*model.Role, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetRole")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetRole")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetRole")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetRole")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetRole(id)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetRoleByName(name string) (*model.Role, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetRoleByName")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetRoleByName")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetRoleByName")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetRoleByName")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetRoleByName(name)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetRolesByNames(names []string) ([]*model.Role, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetRolesByNames")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetRolesByNames")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetRolesByNames")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetRolesByNames")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetRolesByNames(names)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSamlCertificateStatus() *model.SamlCertificateStatus {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSamlCertificateStatus")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSamlCertificateStatus")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSamlCertificateStatus")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSamlCertificateStatus")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetSamlCertificateStatus()

	return resultVar0
}

func (a *OpenTracingAppLayer) GetSamlMetadata() (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSamlMetadata")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSamlMetadata")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSamlMetadata")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSamlMetadata")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSamlMetadata()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSamlMetadataFromIdp(idpMetadataUrl string) (*model.SamlMetadataResponse, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSamlMetadataFromIdp")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSamlMetadataFromIdp")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSamlMetadataFromIdp")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSamlMetadataFromIdp")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSamlMetadataFromIdp(idpMetadataUrl)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSanitizeOptions(asAdmin bool) map[string]bool {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSanitizeOptions")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSanitizeOptions")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSanitizeOptions")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSanitizeOptions")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetSanitizeOptions(asAdmin)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetSanitizedConfig() *model.Config {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSanitizedConfig")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSanitizedConfig")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSanitizedConfig")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSanitizedConfig")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetSanitizedConfig()

	return resultVar0
}

func (a *OpenTracingAppLayer) GetScheme(id string) (*model.Scheme, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetScheme")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetScheme")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetScheme")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetScheme")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetScheme(id)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSchemeByName(name string) (*model.Scheme, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSchemeByName")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSchemeByName")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSchemeByName")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSchemeByName")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSchemeByName(name)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSchemeRolesForChannel(channelId string) (guestRoleName string, userRoleName string, adminRoleName string, err *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSchemeRolesForChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSchemeRolesForChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSchemeRolesForChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSchemeRolesForChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2, resultVar3 := a.app.GetSchemeRolesForChannel(channelId)

	if resultVar3 != nil {
		span.LogFields(spanlog.Error(resultVar3))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2, resultVar3
}

func (a *OpenTracingAppLayer) GetSchemeRolesForTeam(teamId string) (string, string, string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSchemeRolesForTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSchemeRolesForTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSchemeRolesForTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSchemeRolesForTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2, resultVar3 := a.app.GetSchemeRolesForTeam(teamId)

	if resultVar3 != nil {
		span.LogFields(spanlog.Error(resultVar3))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2, resultVar3
}

func (a *OpenTracingAppLayer) GetSchemes(scope string, offset int, limit int) ([]*model.Scheme, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSchemes")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSchemes")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSchemes")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSchemes")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSchemes(scope, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSchemesPage(scope string, page int, perPage int) ([]*model.Scheme, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSchemesPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSchemesPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSchemesPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSchemesPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSchemesPage(scope, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSession(token string) (*model.Session, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSession")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSession")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSession")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSession")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSession(token)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSessionById(sessionId string) (*model.Session, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSessionById")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSessionById")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSessionById")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSessionById")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSessionById(sessionId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSessionLengthInMillis(session *model.Session) int64 {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSessionLengthInMillis")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSessionLengthInMillis")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSessionLengthInMillis")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSessionLengthInMillis")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetSessionLengthInMillis(session)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetSessions(userId string) ([]*model.Session, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSessions")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSessions")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSessions")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSessions")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSessions(userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSidebarCategories(userId string, teamId string) (*model.OrderedSidebarCategories, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSidebarCategories")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSidebarCategories")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSidebarCategories")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSidebarCategories")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSidebarCategories(userId, teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSidebarCategory(categoryId string) (*model.SidebarCategoryWithChannels, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSidebarCategory")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSidebarCategory")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSidebarCategory")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSidebarCategory")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSidebarCategory(categoryId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSidebarCategoryOrder(userId string, teamId string) ([]string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSidebarCategoryOrder")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSidebarCategoryOrder")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSidebarCategoryOrder")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSidebarCategoryOrder")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSidebarCategoryOrder(userId, teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSinglePost(postId string) (*model.Post, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSinglePost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSinglePost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSinglePost")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSinglePost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetSinglePost(postId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSiteURL() string {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSiteURL")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSiteURL")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSiteURL")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSiteURL")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetSiteURL()

	return resultVar0
}

func (a *OpenTracingAppLayer) GetStatus(userId string) (*model.Status, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetStatus")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetStatus")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetStatus")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetStatus")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetStatus(userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetStatusFromCache(userId string) *model.Status {
	origCtx := a.ctx
	a.log.Info("nr.app.GetStatusFromCache")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetStatusFromCache")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetStatusFromCache")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetStatusFromCache")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetStatusFromCache(userId)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetStatusesByIds(userIds []string) (map[string]interface{}, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetStatusesByIds")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetStatusesByIds")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetStatusesByIds")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetStatusesByIds")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetStatusesByIds(userIds)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetSuggestions(commandArgs *model.CommandArgs, commands []*model.Command, roleID string) []model.AutocompleteSuggestion {
	origCtx := a.ctx
	a.log.Info("nr.app.GetSuggestions")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetSuggestions")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetSuggestions")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetSuggestions")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetSuggestions(commandArgs, commands, roleID)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetTeam(teamId string) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeam(teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamByInviteId(inviteId string) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamByInviteId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamByInviteId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamByInviteId")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamByInviteId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamByInviteId(inviteId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamByName(name string) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamByName")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamByName")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamByName")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamByName")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamByName(name)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamGroupUsers(teamID string) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamGroupUsers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamGroupUsers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamGroupUsers")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamGroupUsers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamGroupUsers(teamID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamIcon(team *model.Team) ([]byte, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamIcon")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamIcon")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamIcon")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamIcon")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamIcon(team)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamIdFromQuery(query url.Values) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamIdFromQuery")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamIdFromQuery")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamIdFromQuery")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamIdFromQuery")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamIdFromQuery(query)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamMember(teamId string, userId string) (*model.TeamMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamMember")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamMember")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamMember")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamMember")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamMember(teamId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamMembers(teamId string, offset int, limit int, teamMembersGetOptions *model.TeamMembersGetOptions) ([]*model.TeamMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamMembers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamMembers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamMembers")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamMembers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamMembers(teamId, offset, limit, teamMembersGetOptions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamMembersByIds(teamId string, userIds []string, restrictions *model.ViewUsersRestrictions) ([]*model.TeamMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamMembersByIds")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamMembersByIds")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamMembersByIds")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamMembersByIds")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamMembersByIds(teamId, userIds, restrictions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamMembersForUser(userId string) ([]*model.TeamMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamMembersForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamMembersForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamMembersForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamMembersForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamMembersForUser(userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamMembersForUserWithPagination(userId string, page int, perPage int) ([]*model.TeamMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamMembersForUserWithPagination")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamMembersForUserWithPagination")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamMembersForUserWithPagination")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamMembersForUserWithPagination")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamMembersForUserWithPagination(userId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamSchemeChannelRoles(teamId string) (guestRoleName string, userRoleName string, adminRoleName string, err *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamSchemeChannelRoles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamSchemeChannelRoles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamSchemeChannelRoles")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamSchemeChannelRoles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2, resultVar3 := a.app.GetTeamSchemeChannelRoles(teamId)

	if resultVar3 != nil {
		span.LogFields(spanlog.Error(resultVar3))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2, resultVar3
}

func (a *OpenTracingAppLayer) GetTeamStats(teamId string, restrictions *model.ViewUsersRestrictions) (*model.TeamStats, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamStats")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamStats")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamStats")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamStats")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamStats(teamId, restrictions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamUnread(teamId string, userId string) (*model.TeamUnread, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamUnread")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamUnread")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamUnread")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamUnread")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamUnread(teamId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamsForScheme(scheme *model.Scheme, offset int, limit int) ([]*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamsForScheme")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamsForScheme")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamsForScheme")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamsForScheme")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamsForScheme(scheme, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamsForSchemePage(scheme *model.Scheme, page int, perPage int) ([]*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamsForSchemePage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamsForSchemePage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamsForSchemePage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamsForSchemePage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamsForSchemePage(scheme, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamsForUser(userId string) ([]*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamsForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamsForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamsForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamsForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamsForUser(userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTeamsUnreadForUser(excludeTeamId string, userId string) ([]*model.TeamUnread, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTeamsUnreadForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTeamsUnreadForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTeamsUnreadForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTeamsUnreadForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTeamsUnreadForUser(excludeTeamId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTermsOfService(id string) (*model.TermsOfService, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTermsOfService")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTermsOfService")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTermsOfService")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTermsOfService")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTermsOfService(id)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetTotalUsersStats(viewRestrictions *model.ViewUsersRestrictions) (*model.UsersStats, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetTotalUsersStats")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetTotalUsersStats")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetTotalUsersStats")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetTotalUsersStats")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetTotalUsersStats(viewRestrictions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUser(userId string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUser(userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUserAccessToken(tokenId string, sanitize bool) (*model.UserAccessToken, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUserAccessToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUserAccessToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUserAccessToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUserAccessToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUserAccessToken(tokenId, sanitize)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUserAccessTokens(page int, perPage int) ([]*model.UserAccessToken, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUserAccessTokens")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUserAccessTokens")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUserAccessTokens")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUserAccessTokens")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUserAccessTokens(page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUserAccessTokensForUser(userId string, page int, perPage int) ([]*model.UserAccessToken, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUserAccessTokensForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUserAccessTokensForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUserAccessTokensForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUserAccessTokensForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUserAccessTokensForUser(userId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUserByAuth(authData *string, authService string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUserByAuth")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUserByAuth")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUserByAuth")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUserByAuth")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUserByAuth(authData, authService)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUserByEmail(email string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUserByEmail")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUserByEmail")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUserByEmail")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUserByEmail")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUserByEmail(email)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUserByUsername(username string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUserByUsername")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUserByUsername")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUserByUsername")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUserByUsername")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUserByUsername(username)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUserForLogin(id string, loginId string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUserForLogin")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUserForLogin")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUserForLogin")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUserForLogin")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUserForLogin(id, loginId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUserStatusesByIds(userIds []string) ([]*model.Status, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUserStatusesByIds")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUserStatusesByIds")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUserStatusesByIds")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUserStatusesByIds")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUserStatusesByIds(userIds)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUserTermsOfService(userId string) (*model.UserTermsOfService, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUserTermsOfService")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUserTermsOfService")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUserTermsOfService")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUserTermsOfService")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUserTermsOfService(userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsers(options *model.UserGetOptions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsers")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsers(options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersByGroupChannelIds(channelIds []string, asAdmin bool) (map[string][]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersByGroupChannelIds")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersByGroupChannelIds")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersByGroupChannelIds")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersByGroupChannelIds")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersByGroupChannelIds(channelIds, asAdmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersByIds(userIds []string, options *store.UserGetByIdsOpts) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersByIds")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersByIds")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersByIds")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersByIds")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersByIds(userIds, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersByUsernames(usernames []string, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersByUsernames")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersByUsernames")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersByUsernames")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersByUsernames")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersByUsernames(usernames, asAdmin, viewRestrictions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersEtag(restrictionsHash string) string {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersEtag")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersEtag")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersEtag")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersEtag")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetUsersEtag(restrictionsHash)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetUsersInChannel(channelId string, offset int, limit int) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersInChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersInChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersInChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersInChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersInChannel(channelId, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersInChannelByStatus(channelId string, offset int, limit int) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersInChannelByStatus")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersInChannelByStatus")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersInChannelByStatus")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersInChannelByStatus")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersInChannelByStatus(channelId, offset, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersInChannelMap(channelId string, offset int, limit int, asAdmin bool) (map[string]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersInChannelMap")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersInChannelMap")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersInChannelMap")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersInChannelMap")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersInChannelMap(channelId, offset, limit, asAdmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersInChannelPage(channelId string, page int, perPage int, asAdmin bool) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersInChannelPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersInChannelPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersInChannelPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersInChannelPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersInChannelPage(channelId, page, perPage, asAdmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersInChannelPageByStatus(channelId string, page int, perPage int, asAdmin bool) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersInChannelPageByStatus")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersInChannelPageByStatus")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersInChannelPageByStatus")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersInChannelPageByStatus")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersInChannelPageByStatus(channelId, page, perPage, asAdmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersInTeam(options *model.UserGetOptions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersInTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersInTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersInTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersInTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersInTeam(options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersInTeamEtag(teamId string, restrictionsHash string) string {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersInTeamEtag")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersInTeamEtag")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersInTeamEtag")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersInTeamEtag")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetUsersInTeamEtag(teamId, restrictionsHash)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetUsersInTeamPage(options *model.UserGetOptions, asAdmin bool) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersInTeamPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersInTeamPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersInTeamPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersInTeamPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersInTeamPage(options, asAdmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersNotInChannel(teamId string, channelId string, groupConstrained bool, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersNotInChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersNotInChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersNotInChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersNotInChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersNotInChannel(teamId, channelId, groupConstrained, offset, limit, viewRestrictions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersNotInChannelMap(teamId string, channelId string, groupConstrained bool, offset int, limit int, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) (map[string]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersNotInChannelMap")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersNotInChannelMap")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersNotInChannelMap")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersNotInChannelMap")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersNotInChannelMap(teamId, channelId, groupConstrained, offset, limit, asAdmin, viewRestrictions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersNotInChannelPage(teamId string, channelId string, groupConstrained bool, page int, perPage int, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersNotInChannelPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersNotInChannelPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersNotInChannelPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersNotInChannelPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersNotInChannelPage(teamId, channelId, groupConstrained, page, perPage, asAdmin, viewRestrictions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersNotInTeam(teamId string, groupConstrained bool, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersNotInTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersNotInTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersNotInTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersNotInTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersNotInTeam(teamId, groupConstrained, offset, limit, viewRestrictions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersNotInTeamEtag(teamId string, restrictionsHash string) string {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersNotInTeamEtag")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersNotInTeamEtag")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersNotInTeamEtag")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersNotInTeamEtag")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.GetUsersNotInTeamEtag(teamId, restrictionsHash)

	return resultVar0
}

func (a *OpenTracingAppLayer) GetUsersNotInTeamPage(teamId string, groupConstrained bool, page int, perPage int, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersNotInTeamPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersNotInTeamPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersNotInTeamPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersNotInTeamPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersNotInTeamPage(teamId, groupConstrained, page, perPage, asAdmin, viewRestrictions)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersPage(options *model.UserGetOptions, asAdmin bool) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersPage(options, asAdmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersWithoutTeam(options *model.UserGetOptions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersWithoutTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersWithoutTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersWithoutTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersWithoutTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersWithoutTeam(options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetUsersWithoutTeamPage(options *model.UserGetOptions, asAdmin bool) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetUsersWithoutTeamPage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetUsersWithoutTeamPage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetUsersWithoutTeamPage")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetUsersWithoutTeamPage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetUsersWithoutTeamPage(options, asAdmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetVerifyEmailToken(token string) (*model.Token, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetVerifyEmailToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetVerifyEmailToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetVerifyEmailToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetVerifyEmailToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetVerifyEmailToken(token)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetViewUsersRestrictions(userId string) (*model.ViewUsersRestrictions, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetViewUsersRestrictions")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetViewUsersRestrictions")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetViewUsersRestrictions")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetViewUsersRestrictions")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetViewUsersRestrictions(userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) GetWarnMetricsStatus() (map[string]*model.WarnMetricStatus, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.GetWarnMetricsStatus")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.GetWarnMetricsStatus")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.GetWarnMetricsStatus")
	segment := newrelic.StartSegment(nrtx, "nr.app.GetWarnMetricsStatus")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.GetWarnMetricsStatus()

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) Handle404(w http.ResponseWriter, r *http.Request) {
	origCtx := a.ctx
	a.log.Info("nr.app.Handle404")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.Handle404")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.Handle404")
	segment := newrelic.StartSegment(nrtx, "nr.app.Handle404")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.Handle404(w, r)
}

func (a *OpenTracingAppLayer) HandleCommandResponse(command *model.Command, args *model.CommandArgs, response *model.CommandResponse, builtIn bool) (*model.CommandResponse, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.HandleCommandResponse")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HandleCommandResponse")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HandleCommandResponse")
	segment := newrelic.StartSegment(nrtx, "nr.app.HandleCommandResponse")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.HandleCommandResponse(command, args, response, builtIn)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) HandleCommandResponsePost(command *model.Command, args *model.CommandArgs, response *model.CommandResponse, builtIn bool) (*model.Post, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.HandleCommandResponsePost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HandleCommandResponsePost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HandleCommandResponsePost")
	segment := newrelic.StartSegment(nrtx, "nr.app.HandleCommandResponsePost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.HandleCommandResponsePost(command, args, response, builtIn)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) HandleCommandWebhook(hookId string, response *model.CommandResponse) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.HandleCommandWebhook")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HandleCommandWebhook")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HandleCommandWebhook")
	segment := newrelic.StartSegment(nrtx, "nr.app.HandleCommandWebhook")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.HandleCommandWebhook(hookId, response)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) HandleImages(previewPathList []string, thumbnailPathList []string, fileData [][]byte) {
	origCtx := a.ctx
	a.log.Info("nr.app.HandleImages")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HandleImages")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HandleImages")
	segment := newrelic.StartSegment(nrtx, "nr.app.HandleImages")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.HandleImages(previewPathList, thumbnailPathList, fileData)
}

func (a *OpenTracingAppLayer) HandleIncomingWebhook(hookId string, req *model.IncomingWebhookRequest) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.HandleIncomingWebhook")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HandleIncomingWebhook")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HandleIncomingWebhook")
	segment := newrelic.StartSegment(nrtx, "nr.app.HandleIncomingWebhook")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.HandleIncomingWebhook(hookId, req)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) HandleMessageExportConfig(cfg *model.Config, appCfg *model.Config) {
	origCtx := a.ctx
	a.log.Info("nr.app.HandleMessageExportConfig")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HandleMessageExportConfig")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HandleMessageExportConfig")
	segment := newrelic.StartSegment(nrtx, "nr.app.HandleMessageExportConfig")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.HandleMessageExportConfig(cfg, appCfg)
}

func (a *OpenTracingAppLayer) HasPermissionTo(askingUserId string, permission *model.Permission) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.HasPermissionTo")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HasPermissionTo")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HasPermissionTo")
	segment := newrelic.StartSegment(nrtx, "nr.app.HasPermissionTo")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.HasPermissionTo(askingUserId, permission)

	return resultVar0
}

func (a *OpenTracingAppLayer) HasPermissionToChannel(askingUserId string, channelId string, permission *model.Permission) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.HasPermissionToChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HasPermissionToChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HasPermissionToChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.HasPermissionToChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.HasPermissionToChannel(askingUserId, channelId, permission)

	return resultVar0
}

func (a *OpenTracingAppLayer) HasPermissionToChannelByPost(askingUserId string, postId string, permission *model.Permission) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.HasPermissionToChannelByPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HasPermissionToChannelByPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HasPermissionToChannelByPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.HasPermissionToChannelByPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.HasPermissionToChannelByPost(askingUserId, postId, permission)

	return resultVar0
}

func (a *OpenTracingAppLayer) HasPermissionToTeam(askingUserId string, teamId string, permission *model.Permission) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.HasPermissionToTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HasPermissionToTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HasPermissionToTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.HasPermissionToTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.HasPermissionToTeam(askingUserId, teamId, permission)

	return resultVar0
}

func (a *OpenTracingAppLayer) HasPermissionToUser(askingUserId string, userId string) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.HasPermissionToUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HasPermissionToUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HasPermissionToUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.HasPermissionToUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.HasPermissionToUser(askingUserId, userId)

	return resultVar0
}

func (a *OpenTracingAppLayer) HubRegister(webConn *app.WebConn) {
	origCtx := a.ctx
	a.log.Info("nr.app.HubRegister")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HubRegister")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HubRegister")
	segment := newrelic.StartSegment(nrtx, "nr.app.HubRegister")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.HubRegister(webConn)
}

func (a *OpenTracingAppLayer) HubStart() {
	origCtx := a.ctx
	a.log.Info("nr.app.HubStart")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HubStart")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HubStart")
	segment := newrelic.StartSegment(nrtx, "nr.app.HubStart")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.HubStart()
}

func (a *OpenTracingAppLayer) HubStop() {
	origCtx := a.ctx
	a.log.Info("nr.app.HubStop")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HubStop")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HubStop")
	segment := newrelic.StartSegment(nrtx, "nr.app.HubStop")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.HubStop()
}

func (a *OpenTracingAppLayer) HubUnregister(webConn *app.WebConn) {
	origCtx := a.ctx
	a.log.Info("nr.app.HubUnregister")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.HubUnregister")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.HubUnregister")
	segment := newrelic.StartSegment(nrtx, "nr.app.HubUnregister")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.HubUnregister(webConn)
}

func (a *OpenTracingAppLayer) ImageProxyAdder() func(string) string {
	origCtx := a.ctx
	a.log.Info("nr.app.ImageProxyAdder")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ImageProxyAdder")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ImageProxyAdder")
	segment := newrelic.StartSegment(nrtx, "nr.app.ImageProxyAdder")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ImageProxyAdder()

	return resultVar0
}

func (a *OpenTracingAppLayer) ImageProxyRemover() (f func(string) string) {
	origCtx := a.ctx
	a.log.Info("nr.app.ImageProxyRemover")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ImageProxyRemover")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ImageProxyRemover")
	segment := newrelic.StartSegment(nrtx, "nr.app.ImageProxyRemover")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ImageProxyRemover()

	return resultVar0
}

func (a *OpenTracingAppLayer) ImportPermissions(jsonl io.Reader) error {
	origCtx := a.ctx
	a.log.Info("nr.app.ImportPermissions")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ImportPermissions")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ImportPermissions")
	segment := newrelic.StartSegment(nrtx, "nr.app.ImportPermissions")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ImportPermissions(jsonl)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) InitPlugins(pluginDir string, webappPluginDir string) {
	origCtx := a.ctx
	a.log.Info("nr.app.InitPlugins")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InitPlugins")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InitPlugins")
	segment := newrelic.StartSegment(nrtx, "nr.app.InitPlugins")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.InitPlugins(pluginDir, webappPluginDir)
}

func (a *OpenTracingAppLayer) InitPostMetadata() {
	origCtx := a.ctx
	a.log.Info("nr.app.InitPostMetadata")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InitPostMetadata")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InitPostMetadata")
	segment := newrelic.StartSegment(nrtx, "nr.app.InitPostMetadata")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.InitPostMetadata()
}

func (a *OpenTracingAppLayer) InitServer() {
	origCtx := a.ctx
	a.log.Info("nr.app.InitServer")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InitServer")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InitServer")
	segment := newrelic.StartSegment(nrtx, "nr.app.InitServer")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.InitServer()
}

func (a *OpenTracingAppLayer) InstallMarketplacePlugin(request *model.InstallMarketplacePluginRequest) (*model.Manifest, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.InstallMarketplacePlugin")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InstallMarketplacePlugin")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InstallMarketplacePlugin")
	segment := newrelic.StartSegment(nrtx, "nr.app.InstallMarketplacePlugin")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.InstallMarketplacePlugin(request)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) InstallPlugin(pluginFile io.ReadSeeker, replace bool) (*model.Manifest, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.InstallPlugin")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InstallPlugin")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InstallPlugin")
	segment := newrelic.StartSegment(nrtx, "nr.app.InstallPlugin")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.InstallPlugin(pluginFile, replace)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) InstallPluginFromData(data model.PluginEventData) {
	origCtx := a.ctx
	a.log.Info("nr.app.InstallPluginFromData")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InstallPluginFromData")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InstallPluginFromData")
	segment := newrelic.StartSegment(nrtx, "nr.app.InstallPluginFromData")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.InstallPluginFromData(data)
}

func (a *OpenTracingAppLayer) InstallPluginWithSignature(pluginFile io.ReadSeeker, signature io.ReadSeeker) (*model.Manifest, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.InstallPluginWithSignature")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InstallPluginWithSignature")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InstallPluginWithSignature")
	segment := newrelic.StartSegment(nrtx, "nr.app.InstallPluginWithSignature")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.InstallPluginWithSignature(pluginFile, signature)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) InvalidateAllEmailInvites() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.InvalidateAllEmailInvites")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InvalidateAllEmailInvites")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InvalidateAllEmailInvites")
	segment := newrelic.StartSegment(nrtx, "nr.app.InvalidateAllEmailInvites")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.InvalidateAllEmailInvites()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) InvalidateCacheForUser(userId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.InvalidateCacheForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InvalidateCacheForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InvalidateCacheForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.InvalidateCacheForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.InvalidateCacheForUser(userId)
}

func (a *OpenTracingAppLayer) InvalidateWebConnSessionCacheForUser(userId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.InvalidateWebConnSessionCacheForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InvalidateWebConnSessionCacheForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InvalidateWebConnSessionCacheForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.InvalidateWebConnSessionCacheForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.InvalidateWebConnSessionCacheForUser(userId)
}

func (a *OpenTracingAppLayer) InviteGuestsToChannels(teamId string, guestsInvite *model.GuestsInvite, senderId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.InviteGuestsToChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InviteGuestsToChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InviteGuestsToChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.InviteGuestsToChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.InviteGuestsToChannels(teamId, guestsInvite, senderId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) InviteGuestsToChannelsGracefully(teamId string, guestsInvite *model.GuestsInvite, senderId string) ([]*model.EmailInviteWithError, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.InviteGuestsToChannelsGracefully")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InviteGuestsToChannelsGracefully")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InviteGuestsToChannelsGracefully")
	segment := newrelic.StartSegment(nrtx, "nr.app.InviteGuestsToChannelsGracefully")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.InviteGuestsToChannelsGracefully(teamId, guestsInvite, senderId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) InviteNewUsersToTeam(emailList []string, teamId string, senderId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.InviteNewUsersToTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InviteNewUsersToTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InviteNewUsersToTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.InviteNewUsersToTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.InviteNewUsersToTeam(emailList, teamId, senderId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) InviteNewUsersToTeamGracefully(emailList []string, teamId string, senderId string) ([]*model.EmailInviteWithError, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.InviteNewUsersToTeamGracefully")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.InviteNewUsersToTeamGracefully")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.InviteNewUsersToTeamGracefully")
	segment := newrelic.StartSegment(nrtx, "nr.app.InviteNewUsersToTeamGracefully")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.InviteNewUsersToTeamGracefully(emailList, teamId, senderId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) IsFirstUserAccount() bool {
	origCtx := a.ctx
	a.log.Info("nr.app.IsFirstUserAccount")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.IsFirstUserAccount")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.IsFirstUserAccount")
	segment := newrelic.StartSegment(nrtx, "nr.app.IsFirstUserAccount")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.IsFirstUserAccount()

	return resultVar0
}

func (a *OpenTracingAppLayer) IsLeader() bool {
	origCtx := a.ctx
	a.log.Info("nr.app.IsLeader")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.IsLeader")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.IsLeader")
	segment := newrelic.StartSegment(nrtx, "nr.app.IsLeader")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.IsLeader()

	return resultVar0
}

func (a *OpenTracingAppLayer) IsPasswordValid(password string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.IsPasswordValid")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.IsPasswordValid")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.IsPasswordValid")
	segment := newrelic.StartSegment(nrtx, "nr.app.IsPasswordValid")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.IsPasswordValid(password)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) IsPhase2MigrationCompleted() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.IsPhase2MigrationCompleted")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.IsPhase2MigrationCompleted")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.IsPhase2MigrationCompleted")
	segment := newrelic.StartSegment(nrtx, "nr.app.IsPhase2MigrationCompleted")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.IsPhase2MigrationCompleted()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) IsUserAway(lastActivityAt int64) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.IsUserAway")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.IsUserAway")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.IsUserAway")
	segment := newrelic.StartSegment(nrtx, "nr.app.IsUserAway")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.IsUserAway(lastActivityAt)

	return resultVar0
}

func (a *OpenTracingAppLayer) IsUserSignUpAllowed() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.IsUserSignUpAllowed")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.IsUserSignUpAllowed")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.IsUserSignUpAllowed")
	segment := newrelic.StartSegment(nrtx, "nr.app.IsUserSignUpAllowed")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.IsUserSignUpAllowed()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) IsUsernameTaken(name string) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.IsUsernameTaken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.IsUsernameTaken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.IsUsernameTaken")
	segment := newrelic.StartSegment(nrtx, "nr.app.IsUsernameTaken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.IsUsernameTaken(name)

	return resultVar0
}

func (a *OpenTracingAppLayer) JoinChannel(channel *model.Channel, userId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.JoinChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.JoinChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.JoinChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.JoinChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.JoinChannel(channel, userId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) JoinDefaultChannels(teamId string, user *model.User, shouldBeAdmin bool, userRequestorId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.JoinDefaultChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.JoinDefaultChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.JoinDefaultChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.JoinDefaultChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.JoinDefaultChannels(teamId, user, shouldBeAdmin, userRequestorId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) JoinUserToTeam(team *model.Team, user *model.User, userRequestorId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.JoinUserToTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.JoinUserToTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.JoinUserToTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.JoinUserToTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.JoinUserToTeam(team, user, userRequestorId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) LeaveChannel(channelId string, userId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.LeaveChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.LeaveChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.LeaveChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.LeaveChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.LeaveChannel(channelId, userId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) LeaveTeam(team *model.Team, user *model.User, requestorId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.LeaveTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.LeaveTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.LeaveTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.LeaveTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.LeaveTeam(team, user, requestorId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) LimitedClientConfig() map[string]string {
	origCtx := a.ctx
	a.log.Info("nr.app.LimitedClientConfig")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.LimitedClientConfig")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.LimitedClientConfig")
	segment := newrelic.StartSegment(nrtx, "nr.app.LimitedClientConfig")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.LimitedClientConfig()

	return resultVar0
}

func (a *OpenTracingAppLayer) LimitedClientConfigWithComputed() map[string]string {
	origCtx := a.ctx
	a.log.Info("nr.app.LimitedClientConfigWithComputed")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.LimitedClientConfigWithComputed")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.LimitedClientConfigWithComputed")
	segment := newrelic.StartSegment(nrtx, "nr.app.LimitedClientConfigWithComputed")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.LimitedClientConfigWithComputed()

	return resultVar0
}

func (a *OpenTracingAppLayer) ListAllCommands(teamId string, T goi18n.TranslateFunc) ([]*model.Command, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ListAllCommands")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ListAllCommands")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ListAllCommands")
	segment := newrelic.StartSegment(nrtx, "nr.app.ListAllCommands")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ListAllCommands(teamId, T)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) ListAutocompleteCommands(teamId string, T goi18n.TranslateFunc) ([]*model.Command, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ListAutocompleteCommands")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ListAutocompleteCommands")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ListAutocompleteCommands")
	segment := newrelic.StartSegment(nrtx, "nr.app.ListAutocompleteCommands")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	span.SetTag("teamId", teamId)

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ListAutocompleteCommands(teamId, T)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) ListDirectory(path string) ([]string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ListDirectory")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ListDirectory")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ListDirectory")
	segment := newrelic.StartSegment(nrtx, "nr.app.ListDirectory")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ListDirectory(path)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) ListPluginKeys(pluginId string, page int, perPage int) ([]string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ListPluginKeys")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ListPluginKeys")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ListPluginKeys")
	segment := newrelic.StartSegment(nrtx, "nr.app.ListPluginKeys")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ListPluginKeys(pluginId, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) ListTeamCommands(teamId string) ([]*model.Command, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ListTeamCommands")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ListTeamCommands")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ListTeamCommands")
	segment := newrelic.StartSegment(nrtx, "nr.app.ListTeamCommands")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ListTeamCommands(teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) LogAuditRec(rec *audit.Record, err error) {
	origCtx := a.ctx
	a.log.Info("nr.app.LogAuditRec")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.LogAuditRec")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.LogAuditRec")
	segment := newrelic.StartSegment(nrtx, "nr.app.LogAuditRec")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.LogAuditRec(rec, err)
}

func (a *OpenTracingAppLayer) LogAuditRecWithLevel(rec *audit.Record, level mlog.LogLevel, err error) {
	origCtx := a.ctx
	a.log.Info("nr.app.LogAuditRecWithLevel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.LogAuditRecWithLevel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.LogAuditRecWithLevel")
	segment := newrelic.StartSegment(nrtx, "nr.app.LogAuditRecWithLevel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.LogAuditRecWithLevel(rec, level, err)
}

func (a *OpenTracingAppLayer) LoginByOAuth(service string, userData io.Reader, teamId string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.LoginByOAuth")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.LoginByOAuth")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.LoginByOAuth")
	segment := newrelic.StartSegment(nrtx, "nr.app.LoginByOAuth")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.LoginByOAuth(service, userData, teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) MakeAuditRecord(event string, initialStatus string) *audit.Record {
	origCtx := a.ctx
	a.log.Info("nr.app.MakeAuditRecord")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MakeAuditRecord")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MakeAuditRecord")
	segment := newrelic.StartSegment(nrtx, "nr.app.MakeAuditRecord")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.MakeAuditRecord(event, initialStatus)

	return resultVar0
}

func (a *OpenTracingAppLayer) MakePermissionError(permissions []*model.Permission) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.MakePermissionError")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MakePermissionError")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MakePermissionError")
	segment := newrelic.StartSegment(nrtx, "nr.app.MakePermissionError")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.MakePermissionError(permissions)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) MarkChannelAsUnreadFromPost(postID string, userID string) (*model.ChannelUnreadAt, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.MarkChannelAsUnreadFromPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MarkChannelAsUnreadFromPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MarkChannelAsUnreadFromPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.MarkChannelAsUnreadFromPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.MarkChannelAsUnreadFromPost(postID, userID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) MarkChannelsAsViewed(channelIds []string, userId string, currentSessionId string) (map[string]int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.MarkChannelsAsViewed")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MarkChannelsAsViewed")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MarkChannelsAsViewed")
	segment := newrelic.StartSegment(nrtx, "nr.app.MarkChannelsAsViewed")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.MarkChannelsAsViewed(channelIds, userId, currentSessionId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) MaxPostSize() int {
	origCtx := a.ctx
	a.log.Info("nr.app.MaxPostSize")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MaxPostSize")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MaxPostSize")
	segment := newrelic.StartSegment(nrtx, "nr.app.MaxPostSize")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.MaxPostSize()

	return resultVar0
}

func (a *OpenTracingAppLayer) MentionsToPublicChannels(message string, teamId string) model.ChannelMentionMap {
	origCtx := a.ctx
	a.log.Info("nr.app.MentionsToPublicChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MentionsToPublicChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MentionsToPublicChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.MentionsToPublicChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.MentionsToPublicChannels(message, teamId)

	return resultVar0
}

func (a *OpenTracingAppLayer) MentionsToTeamMembers(message string, teamId string) model.UserMentionMap {
	origCtx := a.ctx
	a.log.Info("nr.app.MentionsToTeamMembers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MentionsToTeamMembers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MentionsToTeamMembers")
	segment := newrelic.StartSegment(nrtx, "nr.app.MentionsToTeamMembers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.MentionsToTeamMembers(message, teamId)

	return resultVar0
}

func (a *OpenTracingAppLayer) MigrateFilenamesToFileInfos(post *model.Post) []*model.FileInfo {
	origCtx := a.ctx
	a.log.Info("nr.app.MigrateFilenamesToFileInfos")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MigrateFilenamesToFileInfos")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MigrateFilenamesToFileInfos")
	segment := newrelic.StartSegment(nrtx, "nr.app.MigrateFilenamesToFileInfos")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.MigrateFilenamesToFileInfos(post)

	return resultVar0
}

func (a *OpenTracingAppLayer) MigrateIdLDAP(toAttribute string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.MigrateIdLDAP")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MigrateIdLDAP")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MigrateIdLDAP")
	segment := newrelic.StartSegment(nrtx, "nr.app.MigrateIdLDAP")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.MigrateIdLDAP(toAttribute)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) MoveChannel(team *model.Team, channel *model.Channel, user *model.User) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.MoveChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MoveChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MoveChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.MoveChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.MoveChannel(team, channel, user)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) MoveCommand(team *model.Team, command *model.Command) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.MoveCommand")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MoveCommand")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MoveCommand")
	segment := newrelic.StartSegment(nrtx, "nr.app.MoveCommand")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.MoveCommand(team, command)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) MoveFile(oldPath string, newPath string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.MoveFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.MoveFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.MoveFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.MoveFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.MoveFile(oldPath, newPath)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) NewClusterDiscoveryService() *app.ClusterDiscoveryService {
	origCtx := a.ctx
	a.log.Info("nr.app.NewClusterDiscoveryService")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.NewClusterDiscoveryService")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.NewClusterDiscoveryService")
	segment := newrelic.StartSegment(nrtx, "nr.app.NewClusterDiscoveryService")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.NewClusterDiscoveryService()

	return resultVar0
}

func (a *OpenTracingAppLayer) NewPluginAPI(manifest *model.Manifest) plugin.API {
	origCtx := a.ctx
	a.log.Info("nr.app.NewPluginAPI")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.NewPluginAPI")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.NewPluginAPI")
	segment := newrelic.StartSegment(nrtx, "nr.app.NewPluginAPI")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.NewPluginAPI(manifest)

	return resultVar0
}

func (a *OpenTracingAppLayer) NewWebConn(ws *websocket.Conn, session model.Session, t goi18n.TranslateFunc, locale string) *app.WebConn {
	origCtx := a.ctx
	a.log.Info("nr.app.NewWebConn")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.NewWebConn")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.NewWebConn")
	segment := newrelic.StartSegment(nrtx, "nr.app.NewWebConn")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.NewWebConn(ws, session, t, locale)

	return resultVar0
}

func (a *OpenTracingAppLayer) NewWebHub() *app.Hub {
	origCtx := a.ctx
	a.log.Info("nr.app.NewWebHub")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.NewWebHub")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.NewWebHub")
	segment := newrelic.StartSegment(nrtx, "nr.app.NewWebHub")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.NewWebHub()

	return resultVar0
}

func (a *OpenTracingAppLayer) NotifyAndSetWarnMetricAck(warnMetricId string, sender *model.User, forceAck bool, isBot bool) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.NotifyAndSetWarnMetricAck")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.NotifyAndSetWarnMetricAck")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.NotifyAndSetWarnMetricAck")
	segment := newrelic.StartSegment(nrtx, "nr.app.NotifyAndSetWarnMetricAck")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.NotifyAndSetWarnMetricAck(warnMetricId, sender, forceAck, isBot)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) NotifySessionsExpired() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.NotifySessionsExpired")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.NotifySessionsExpired")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.NotifySessionsExpired")
	segment := newrelic.StartSegment(nrtx, "nr.app.NotifySessionsExpired")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.NotifySessionsExpired()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) OpenInteractiveDialog(request model.OpenDialogRequest) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.OpenInteractiveDialog")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.OpenInteractiveDialog")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.OpenInteractiveDialog")
	segment := newrelic.StartSegment(nrtx, "nr.app.OpenInteractiveDialog")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.OpenInteractiveDialog(request)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) OriginChecker() func(*http.Request) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.OriginChecker")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.OriginChecker")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.OriginChecker")
	segment := newrelic.StartSegment(nrtx, "nr.app.OriginChecker")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.OriginChecker()

	return resultVar0
}

func (a *OpenTracingAppLayer) OverrideIconURLIfEmoji(post *model.Post) {
	origCtx := a.ctx
	a.log.Info("nr.app.OverrideIconURLIfEmoji")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.OverrideIconURLIfEmoji")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.OverrideIconURLIfEmoji")
	segment := newrelic.StartSegment(nrtx, "nr.app.OverrideIconURLIfEmoji")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.OverrideIconURLIfEmoji(post)
}

func (a *OpenTracingAppLayer) PatchBot(botUserId string, botPatch *model.BotPatch) (*model.Bot, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.PatchBot")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PatchBot")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PatchBot")
	segment := newrelic.StartSegment(nrtx, "nr.app.PatchBot")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.PatchBot(botUserId, botPatch)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) PatchChannel(channel *model.Channel, patch *model.ChannelPatch, userId string) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.PatchChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PatchChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PatchChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.PatchChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.PatchChannel(channel, patch, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) PatchChannelModerationsForChannel(channel *model.Channel, channelModerationsPatch []*model.ChannelModerationPatch) ([]*model.ChannelModeration, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.PatchChannelModerationsForChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PatchChannelModerationsForChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PatchChannelModerationsForChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.PatchChannelModerationsForChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.PatchChannelModerationsForChannel(channel, channelModerationsPatch)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) PatchPost(postId string, patch *model.PostPatch) (*model.Post, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.PatchPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PatchPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PatchPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.PatchPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.PatchPost(postId, patch)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) PatchRole(role *model.Role, patch *model.RolePatch) (*model.Role, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.PatchRole")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PatchRole")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PatchRole")
	segment := newrelic.StartSegment(nrtx, "nr.app.PatchRole")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.PatchRole(role, patch)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) PatchScheme(scheme *model.Scheme, patch *model.SchemePatch) (*model.Scheme, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.PatchScheme")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PatchScheme")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PatchScheme")
	segment := newrelic.StartSegment(nrtx, "nr.app.PatchScheme")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.PatchScheme(scheme, patch)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) PatchTeam(teamId string, patch *model.TeamPatch) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.PatchTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PatchTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PatchTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.PatchTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.PatchTeam(teamId, patch)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) PatchUser(userId string, patch *model.UserPatch, asAdmin bool) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.PatchUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PatchUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PatchUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.PatchUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.PatchUser(userId, patch, asAdmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) PermanentDeleteAllUsers() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PermanentDeleteAllUsers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PermanentDeleteAllUsers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PermanentDeleteAllUsers")
	segment := newrelic.StartSegment(nrtx, "nr.app.PermanentDeleteAllUsers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PermanentDeleteAllUsers()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PermanentDeleteBot(botUserId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PermanentDeleteBot")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PermanentDeleteBot")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PermanentDeleteBot")
	segment := newrelic.StartSegment(nrtx, "nr.app.PermanentDeleteBot")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PermanentDeleteBot(botUserId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PermanentDeleteChannel(channel *model.Channel) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PermanentDeleteChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PermanentDeleteChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PermanentDeleteChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.PermanentDeleteChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PermanentDeleteChannel(channel)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PermanentDeleteTeam(team *model.Team) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PermanentDeleteTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PermanentDeleteTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PermanentDeleteTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.PermanentDeleteTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PermanentDeleteTeam(team)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PermanentDeleteTeamId(teamId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PermanentDeleteTeamId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PermanentDeleteTeamId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PermanentDeleteTeamId")
	segment := newrelic.StartSegment(nrtx, "nr.app.PermanentDeleteTeamId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PermanentDeleteTeamId(teamId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PermanentDeleteUser(user *model.User) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PermanentDeleteUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PermanentDeleteUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PermanentDeleteUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.PermanentDeleteUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PermanentDeleteUser(user)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PluginCommandsForTeam(teamId string) []*model.Command {
	origCtx := a.ctx
	a.log.Info("nr.app.PluginCommandsForTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PluginCommandsForTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PluginCommandsForTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.PluginCommandsForTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PluginCommandsForTeam(teamId)

	return resultVar0
}

func (a *OpenTracingAppLayer) PluginContext() *plugin.Context {
	origCtx := a.ctx
	a.log.Info("nr.app.PluginContext")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PluginContext")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PluginContext")
	segment := newrelic.StartSegment(nrtx, "nr.app.PluginContext")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PluginContext()

	return resultVar0
}

func (a *OpenTracingAppLayer) PostActionCookieSecret() []byte {
	origCtx := a.ctx
	a.log.Info("nr.app.PostActionCookieSecret")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PostActionCookieSecret")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PostActionCookieSecret")
	segment := newrelic.StartSegment(nrtx, "nr.app.PostActionCookieSecret")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PostActionCookieSecret()

	return resultVar0
}

func (a *OpenTracingAppLayer) PostAddToChannelMessage(user *model.User, addedUser *model.User, channel *model.Channel, postRootId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PostAddToChannelMessage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PostAddToChannelMessage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PostAddToChannelMessage")
	segment := newrelic.StartSegment(nrtx, "nr.app.PostAddToChannelMessage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PostAddToChannelMessage(user, addedUser, channel, postRootId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PostPatchWithProxyRemovedFromImageURLs(patch *model.PostPatch) *model.PostPatch {
	origCtx := a.ctx
	a.log.Info("nr.app.PostPatchWithProxyRemovedFromImageURLs")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PostPatchWithProxyRemovedFromImageURLs")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PostPatchWithProxyRemovedFromImageURLs")
	segment := newrelic.StartSegment(nrtx, "nr.app.PostPatchWithProxyRemovedFromImageURLs")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PostPatchWithProxyRemovedFromImageURLs(patch)

	return resultVar0
}

func (a *OpenTracingAppLayer) PostUpdateChannelDisplayNameMessage(userId string, channel *model.Channel, oldChannelDisplayName string, newChannelDisplayName string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PostUpdateChannelDisplayNameMessage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PostUpdateChannelDisplayNameMessage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PostUpdateChannelDisplayNameMessage")
	segment := newrelic.StartSegment(nrtx, "nr.app.PostUpdateChannelDisplayNameMessage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PostUpdateChannelDisplayNameMessage(userId, channel, oldChannelDisplayName, newChannelDisplayName)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PostUpdateChannelHeaderMessage(userId string, channel *model.Channel, oldChannelHeader string, newChannelHeader string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PostUpdateChannelHeaderMessage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PostUpdateChannelHeaderMessage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PostUpdateChannelHeaderMessage")
	segment := newrelic.StartSegment(nrtx, "nr.app.PostUpdateChannelHeaderMessage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PostUpdateChannelHeaderMessage(userId, channel, oldChannelHeader, newChannelHeader)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PostUpdateChannelPurposeMessage(userId string, channel *model.Channel, oldChannelPurpose string, newChannelPurpose string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PostUpdateChannelPurposeMessage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PostUpdateChannelPurposeMessage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PostUpdateChannelPurposeMessage")
	segment := newrelic.StartSegment(nrtx, "nr.app.PostUpdateChannelPurposeMessage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PostUpdateChannelPurposeMessage(userId, channel, oldChannelPurpose, newChannelPurpose)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PostWithProxyAddedToImageURLs(post *model.Post) *model.Post {
	origCtx := a.ctx
	a.log.Info("nr.app.PostWithProxyAddedToImageURLs")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PostWithProxyAddedToImageURLs")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PostWithProxyAddedToImageURLs")
	segment := newrelic.StartSegment(nrtx, "nr.app.PostWithProxyAddedToImageURLs")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PostWithProxyAddedToImageURLs(post)

	return resultVar0
}

func (a *OpenTracingAppLayer) PostWithProxyRemovedFromImageURLs(post *model.Post) *model.Post {
	origCtx := a.ctx
	a.log.Info("nr.app.PostWithProxyRemovedFromImageURLs")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PostWithProxyRemovedFromImageURLs")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PostWithProxyRemovedFromImageURLs")
	segment := newrelic.StartSegment(nrtx, "nr.app.PostWithProxyRemovedFromImageURLs")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PostWithProxyRemovedFromImageURLs(post)

	return resultVar0
}

func (a *OpenTracingAppLayer) PreparePostForClient(originalPost *model.Post, isNewPost bool, isEditPost bool) *model.Post {
	origCtx := a.ctx
	a.log.Info("nr.app.PreparePostForClient")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PreparePostForClient")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PreparePostForClient")
	segment := newrelic.StartSegment(nrtx, "nr.app.PreparePostForClient")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PreparePostForClient(originalPost, isNewPost, isEditPost)

	return resultVar0
}

func (a *OpenTracingAppLayer) PreparePostListForClient(originalList *model.PostList) *model.PostList {
	origCtx := a.ctx
	a.log.Info("nr.app.PreparePostListForClient")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PreparePostListForClient")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PreparePostListForClient")
	segment := newrelic.StartSegment(nrtx, "nr.app.PreparePostListForClient")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PreparePostListForClient(originalList)

	return resultVar0
}

func (a *OpenTracingAppLayer) ProcessSlackAttachments(attachments []*model.SlackAttachment) []*model.SlackAttachment {
	origCtx := a.ctx
	a.log.Info("nr.app.ProcessSlackAttachments")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ProcessSlackAttachments")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ProcessSlackAttachments")
	segment := newrelic.StartSegment(nrtx, "nr.app.ProcessSlackAttachments")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ProcessSlackAttachments(attachments)

	return resultVar0
}

func (a *OpenTracingAppLayer) ProcessSlackText(text string) string {
	origCtx := a.ctx
	a.log.Info("nr.app.ProcessSlackText")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ProcessSlackText")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ProcessSlackText")
	segment := newrelic.StartSegment(nrtx, "nr.app.ProcessSlackText")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ProcessSlackText(text)

	return resultVar0
}

func (a *OpenTracingAppLayer) PromoteGuestToUser(user *model.User, requestorId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PromoteGuestToUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PromoteGuestToUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PromoteGuestToUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.PromoteGuestToUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PromoteGuestToUser(user, requestorId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) Publish(message *model.WebSocketEvent) {
	origCtx := a.ctx
	a.log.Info("nr.app.Publish")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.Publish")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.Publish")
	segment := newrelic.StartSegment(nrtx, "nr.app.Publish")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.Publish(message)
}

func (a *OpenTracingAppLayer) PublishSkipClusterSend(message *model.WebSocketEvent) {
	origCtx := a.ctx
	a.log.Info("nr.app.PublishSkipClusterSend")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PublishSkipClusterSend")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PublishSkipClusterSend")
	segment := newrelic.StartSegment(nrtx, "nr.app.PublishSkipClusterSend")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.PublishSkipClusterSend(message)
}

func (a *OpenTracingAppLayer) PublishUserTyping(userId string, channelId string, parentId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PublishUserTyping")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PublishUserTyping")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PublishUserTyping")
	segment := newrelic.StartSegment(nrtx, "nr.app.PublishUserTyping")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PublishUserTyping(userId, channelId, parentId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PurgeBleveIndexes() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PurgeBleveIndexes")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PurgeBleveIndexes")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PurgeBleveIndexes")
	segment := newrelic.StartSegment(nrtx, "nr.app.PurgeBleveIndexes")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PurgeBleveIndexes()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) PurgeElasticsearchIndexes() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.PurgeElasticsearchIndexes")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.PurgeElasticsearchIndexes")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.PurgeElasticsearchIndexes")
	segment := newrelic.StartSegment(nrtx, "nr.app.PurgeElasticsearchIndexes")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.PurgeElasticsearchIndexes()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) ReadFile(path string) ([]byte, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ReadFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ReadFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ReadFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.ReadFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ReadFile(path)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) RecycleDatabaseConnection() {
	origCtx := a.ctx
	a.log.Info("nr.app.RecycleDatabaseConnection")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RecycleDatabaseConnection")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RecycleDatabaseConnection")
	segment := newrelic.StartSegment(nrtx, "nr.app.RecycleDatabaseConnection")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.RecycleDatabaseConnection()
}

func (a *OpenTracingAppLayer) RegenCommandToken(cmd *model.Command) (*model.Command, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.RegenCommandToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RegenCommandToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RegenCommandToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.RegenCommandToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.RegenCommandToken(cmd)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) RegenOutgoingWebhookToken(hook *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.RegenOutgoingWebhookToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RegenOutgoingWebhookToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RegenOutgoingWebhookToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.RegenOutgoingWebhookToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.RegenOutgoingWebhookToken(hook)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) RegenerateOAuthAppSecret(app *model.OAuthApp) (*model.OAuthApp, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.RegenerateOAuthAppSecret")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RegenerateOAuthAppSecret")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RegenerateOAuthAppSecret")
	segment := newrelic.StartSegment(nrtx, "nr.app.RegenerateOAuthAppSecret")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.RegenerateOAuthAppSecret(app)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) RegenerateTeamInviteId(teamId string) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.RegenerateTeamInviteId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RegenerateTeamInviteId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RegenerateTeamInviteId")
	segment := newrelic.StartSegment(nrtx, "nr.app.RegenerateTeamInviteId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.RegenerateTeamInviteId(teamId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) RegisterPluginCommand(pluginId string, command *model.Command) error {
	origCtx := a.ctx
	a.log.Info("nr.app.RegisterPluginCommand")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RegisterPluginCommand")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RegisterPluginCommand")
	segment := newrelic.StartSegment(nrtx, "nr.app.RegisterPluginCommand")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RegisterPluginCommand(pluginId, command)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) ReloadConfig() error {
	origCtx := a.ctx
	a.log.Info("nr.app.ReloadConfig")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ReloadConfig")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ReloadConfig")
	segment := newrelic.StartSegment(nrtx, "nr.app.ReloadConfig")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ReloadConfig()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RemoveAllDeactivatedMembersFromChannel(channel *model.Channel) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RemoveAllDeactivatedMembersFromChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemoveAllDeactivatedMembersFromChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemoveAllDeactivatedMembersFromChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemoveAllDeactivatedMembersFromChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RemoveAllDeactivatedMembersFromChannel(channel)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RemoveConfigListener(id string) {
	origCtx := a.ctx
	a.log.Info("nr.app.RemoveConfigListener")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemoveConfigListener")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemoveConfigListener")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemoveConfigListener")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.RemoveConfigListener(id)
}

func (a *OpenTracingAppLayer) RemoveFile(path string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RemoveFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemoveFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemoveFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemoveFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RemoveFile(path)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RemovePlugin(id string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RemovePlugin")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemovePlugin")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemovePlugin")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemovePlugin")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RemovePlugin(id)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RemovePluginFromData(data model.PluginEventData) {
	origCtx := a.ctx
	a.log.Info("nr.app.RemovePluginFromData")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemovePluginFromData")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemovePluginFromData")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemovePluginFromData")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.RemovePluginFromData(data)
}

func (a *OpenTracingAppLayer) RemoveSamlIdpCertificate() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RemoveSamlIdpCertificate")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemoveSamlIdpCertificate")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemoveSamlIdpCertificate")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemoveSamlIdpCertificate")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RemoveSamlIdpCertificate()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RemoveSamlPrivateCertificate() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RemoveSamlPrivateCertificate")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemoveSamlPrivateCertificate")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemoveSamlPrivateCertificate")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemoveSamlPrivateCertificate")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RemoveSamlPrivateCertificate()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RemoveSamlPublicCertificate() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RemoveSamlPublicCertificate")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemoveSamlPublicCertificate")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemoveSamlPublicCertificate")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemoveSamlPublicCertificate")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RemoveSamlPublicCertificate()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RemoveTeamIcon(teamId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RemoveTeamIcon")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemoveTeamIcon")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemoveTeamIcon")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemoveTeamIcon")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RemoveTeamIcon(teamId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RemoveTeamMemberFromTeam(teamMember *model.TeamMember, requestorId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RemoveTeamMemberFromTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemoveTeamMemberFromTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemoveTeamMemberFromTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemoveTeamMemberFromTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RemoveTeamMemberFromTeam(teamMember, requestorId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RemoveUserFromChannel(userIdToRemove string, removerUserId string, channel *model.Channel) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RemoveUserFromChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemoveUserFromChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemoveUserFromChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemoveUserFromChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RemoveUserFromChannel(userIdToRemove, removerUserId, channel)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RemoveUserFromTeam(teamId string, userId string, requestorId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RemoveUserFromTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemoveUserFromTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemoveUserFromTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemoveUserFromTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RemoveUserFromTeam(teamId, userId, requestorId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RemoveUsersFromChannelNotMemberOfTeam(remover *model.User, channel *model.Channel, team *model.Team) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RemoveUsersFromChannelNotMemberOfTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RemoveUsersFromChannelNotMemberOfTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RemoveUsersFromChannelNotMemberOfTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.RemoveUsersFromChannelNotMemberOfTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RemoveUsersFromChannelNotMemberOfTeam(remover, channel, team)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RenameChannel(channel *model.Channel, newChannelName string, newDisplayName string) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.RenameChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RenameChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RenameChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.RenameChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.RenameChannel(channel, newChannelName, newDisplayName)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) RenameTeam(team *model.Team, newTeamName string, newDisplayName string) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.RenameTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RenameTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RenameTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.RenameTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.RenameTeam(team, newTeamName, newDisplayName)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) ResetPasswordFromToken(userSuppliedTokenString string, newPassword string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.ResetPasswordFromToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ResetPasswordFromToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ResetPasswordFromToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.ResetPasswordFromToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ResetPasswordFromToken(userSuppliedTokenString, newPassword)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) ResetPermissionsSystem() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.ResetPermissionsSystem")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ResetPermissionsSystem")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ResetPermissionsSystem")
	segment := newrelic.StartSegment(nrtx, "nr.app.ResetPermissionsSystem")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ResetPermissionsSystem()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RestoreChannel(channel *model.Channel, userId string) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.RestoreChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RestoreChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RestoreChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.RestoreChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.RestoreChannel(channel, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) RestoreTeam(teamId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RestoreTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RestoreTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RestoreTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.RestoreTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RestoreTeam(teamId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RestrictUsersGetByPermissions(userId string, options *model.UserGetOptions) (*model.UserGetOptions, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.RestrictUsersGetByPermissions")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RestrictUsersGetByPermissions")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RestrictUsersGetByPermissions")
	segment := newrelic.StartSegment(nrtx, "nr.app.RestrictUsersGetByPermissions")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.RestrictUsersGetByPermissions(userId, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) RestrictUsersSearchByPermissions(userId string, options *model.UserSearchOptions) (*model.UserSearchOptions, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.RestrictUsersSearchByPermissions")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RestrictUsersSearchByPermissions")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RestrictUsersSearchByPermissions")
	segment := newrelic.StartSegment(nrtx, "nr.app.RestrictUsersSearchByPermissions")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.RestrictUsersSearchByPermissions(userId, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) RevokeAccessToken(token string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RevokeAccessToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RevokeAccessToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RevokeAccessToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.RevokeAccessToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RevokeAccessToken(token)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RevokeAllSessions(userId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RevokeAllSessions")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RevokeAllSessions")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RevokeAllSessions")
	segment := newrelic.StartSegment(nrtx, "nr.app.RevokeAllSessions")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RevokeAllSessions(userId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RevokeSession(session *model.Session) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RevokeSession")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RevokeSession")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RevokeSession")
	segment := newrelic.StartSegment(nrtx, "nr.app.RevokeSession")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RevokeSession(session)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RevokeSessionById(sessionId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RevokeSessionById")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RevokeSessionById")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RevokeSessionById")
	segment := newrelic.StartSegment(nrtx, "nr.app.RevokeSessionById")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RevokeSessionById(sessionId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RevokeSessionsForDeviceId(userId string, deviceId string, currentSessionId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RevokeSessionsForDeviceId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RevokeSessionsForDeviceId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RevokeSessionsForDeviceId")
	segment := newrelic.StartSegment(nrtx, "nr.app.RevokeSessionsForDeviceId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RevokeSessionsForDeviceId(userId, deviceId, currentSessionId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RevokeSessionsFromAllUsers() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RevokeSessionsFromAllUsers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RevokeSessionsFromAllUsers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RevokeSessionsFromAllUsers")
	segment := newrelic.StartSegment(nrtx, "nr.app.RevokeSessionsFromAllUsers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RevokeSessionsFromAllUsers()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RevokeUserAccessToken(token *model.UserAccessToken) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.RevokeUserAccessToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RevokeUserAccessToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RevokeUserAccessToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.RevokeUserAccessToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RevokeUserAccessToken(token)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) RolesGrantPermission(roleNames []string, permissionId string) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.RolesGrantPermission")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.RolesGrantPermission")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.RolesGrantPermission")
	segment := newrelic.StartSegment(nrtx, "nr.app.RolesGrantPermission")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.RolesGrantPermission(roleNames, permissionId)

	return resultVar0
}

func (a *OpenTracingAppLayer) SanitizeProfile(user *model.User, asAdmin bool) {
	origCtx := a.ctx
	a.log.Info("nr.app.SanitizeProfile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SanitizeProfile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SanitizeProfile")
	segment := newrelic.StartSegment(nrtx, "nr.app.SanitizeProfile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SanitizeProfile(user, asAdmin)
}

func (a *OpenTracingAppLayer) SanitizeTeam(session model.Session, team *model.Team) *model.Team {
	origCtx := a.ctx
	a.log.Info("nr.app.SanitizeTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SanitizeTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SanitizeTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.SanitizeTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SanitizeTeam(session, team)

	return resultVar0
}

func (a *OpenTracingAppLayer) SanitizeTeams(session model.Session, teams []*model.Team) []*model.Team {
	origCtx := a.ctx
	a.log.Info("nr.app.SanitizeTeams")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SanitizeTeams")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SanitizeTeams")
	segment := newrelic.StartSegment(nrtx, "nr.app.SanitizeTeams")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SanitizeTeams(session, teams)

	return resultVar0
}

func (a *OpenTracingAppLayer) SaveAndBroadcastStatus(status *model.Status) {
	origCtx := a.ctx
	a.log.Info("nr.app.SaveAndBroadcastStatus")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SaveAndBroadcastStatus")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SaveAndBroadcastStatus")
	segment := newrelic.StartSegment(nrtx, "nr.app.SaveAndBroadcastStatus")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SaveAndBroadcastStatus(status)
}

func (a *OpenTracingAppLayer) SaveBrandImage(imageData *multipart.FileHeader) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SaveBrandImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SaveBrandImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SaveBrandImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.SaveBrandImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SaveBrandImage(imageData)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SaveComplianceReport(job *model.Compliance) (*model.Compliance, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SaveComplianceReport")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SaveComplianceReport")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SaveComplianceReport")
	segment := newrelic.StartSegment(nrtx, "nr.app.SaveComplianceReport")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SaveComplianceReport(job)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SaveConfig(newCfg *model.Config, sendConfigChangeClusterMessage bool) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SaveConfig")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SaveConfig")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SaveConfig")
	segment := newrelic.StartSegment(nrtx, "nr.app.SaveConfig")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SaveConfig(newCfg, sendConfigChangeClusterMessage)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SaveReactionForPost(reaction *model.Reaction) (*model.Reaction, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SaveReactionForPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SaveReactionForPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SaveReactionForPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.SaveReactionForPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SaveReactionForPost(reaction)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SaveUserTermsOfService(userId string, termsOfServiceId string, accepted bool) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SaveUserTermsOfService")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SaveUserTermsOfService")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SaveUserTermsOfService")
	segment := newrelic.StartSegment(nrtx, "nr.app.SaveUserTermsOfService")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SaveUserTermsOfService(userId, termsOfServiceId, accepted)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SchemesIterator(scope string, batchSize int) func() []*model.Scheme {
	origCtx := a.ctx
	a.log.Info("nr.app.SchemesIterator")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SchemesIterator")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SchemesIterator")
	segment := newrelic.StartSegment(nrtx, "nr.app.SchemesIterator")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SchemesIterator(scope, batchSize)

	return resultVar0
}

func (a *OpenTracingAppLayer) SearchAllChannels(term string, opts model.ChannelSearchOpts) (*model.ChannelListWithTeamData, int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchAllChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchAllChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchAllChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchAllChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.SearchAllChannels(term, opts)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) SearchAllTeams(searchOpts *model.TeamSearch) ([]*model.Team, int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchAllTeams")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchAllTeams")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchAllTeams")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchAllTeams")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.SearchAllTeams(searchOpts)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) SearchArchivedChannels(teamId string, term string, userId string) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchArchivedChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchArchivedChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchArchivedChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchArchivedChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchArchivedChannels(teamId, term, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchChannels(teamId string, term string) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchChannels(teamId, term)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchChannelsForUser(userId string, teamId string, term string) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchChannelsForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchChannelsForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchChannelsForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchChannelsForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchChannelsForUser(userId, teamId, term)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchChannelsUserNotIn(teamId string, userId string, term string) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchChannelsUserNotIn")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchChannelsUserNotIn")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchChannelsUserNotIn")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchChannelsUserNotIn")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchChannelsUserNotIn(teamId, userId, term)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchEmoji(name string, prefixOnly bool, limit int) ([]*model.Emoji, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchEmoji")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchEmoji")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchEmoji")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchEmoji")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchEmoji(name, prefixOnly, limit)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchEngine() *searchengine.Broker {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchEngine")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchEngine")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchEngine")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchEngine")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SearchEngine()

	return resultVar0
}

func (a *OpenTracingAppLayer) SearchGroupChannels(userId string, term string) (*model.ChannelList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchGroupChannels")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchGroupChannels")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchGroupChannels")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchGroupChannels")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchGroupChannels(userId, term)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchPostsInTeam(teamId string, paramsList []*model.SearchParams) (*model.PostList, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchPostsInTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchPostsInTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchPostsInTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchPostsInTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchPostsInTeam(teamId, paramsList)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchPostsInTeamForUser(terms string, userId string, teamId string, isOrSearch bool, includeDeletedChannels bool, timeZoneOffset int, page int, perPage int) (*model.PostSearchResults, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchPostsInTeamForUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchPostsInTeamForUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchPostsInTeamForUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchPostsInTeamForUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchPostsInTeamForUser(terms, userId, teamId, isOrSearch, includeDeletedChannels, timeZoneOffset, page, perPage)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchPrivateTeams(term string) ([]*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchPrivateTeams")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchPrivateTeams")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchPrivateTeams")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchPrivateTeams")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchPrivateTeams(term)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchPublicTeams(term string) ([]*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchPublicTeams")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchPublicTeams")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchPublicTeams")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchPublicTeams")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchPublicTeams(term)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchUserAccessTokens(term string) ([]*model.UserAccessToken, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchUserAccessTokens")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchUserAccessTokens")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchUserAccessTokens")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchUserAccessTokens")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchUserAccessTokens(term)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchUsers(props *model.UserSearch, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchUsers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchUsers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchUsers")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchUsers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchUsers(props, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchUsersInChannel(channelId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchUsersInChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchUsersInChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchUsersInChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchUsersInChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchUsersInChannel(channelId, term, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchUsersInGroup(groupID string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchUsersInGroup")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchUsersInGroup")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchUsersInGroup")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchUsersInGroup")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchUsersInGroup(groupID, term, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchUsersInTeam(teamId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchUsersInTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchUsersInTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchUsersInTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchUsersInTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchUsersInTeam(teamId, term, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchUsersNotInChannel(teamId string, channelId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchUsersNotInChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchUsersNotInChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchUsersNotInChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchUsersNotInChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchUsersNotInChannel(teamId, channelId, term, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchUsersNotInTeam(notInTeamId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchUsersNotInTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchUsersNotInTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchUsersNotInTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchUsersNotInTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchUsersNotInTeam(notInTeamId, term, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SearchUsersWithoutTeam(term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SearchUsersWithoutTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SearchUsersWithoutTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SearchUsersWithoutTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.SearchUsersWithoutTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SearchUsersWithoutTeam(term, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SendAckToPushProxy(ack *model.PushNotificationAck) error {
	origCtx := a.ctx
	a.log.Info("nr.app.SendAckToPushProxy")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SendAckToPushProxy")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SendAckToPushProxy")
	segment := newrelic.StartSegment(nrtx, "nr.app.SendAckToPushProxy")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SendAckToPushProxy(ack)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SendAutoResponse(channel *model.Channel, receiver *model.User) (bool, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SendAutoResponse")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SendAutoResponse")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SendAutoResponse")
	segment := newrelic.StartSegment(nrtx, "nr.app.SendAutoResponse")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SendAutoResponse(channel, receiver)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SendAutoResponseIfNecessary(channel *model.Channel, sender *model.User) (bool, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SendAutoResponseIfNecessary")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SendAutoResponseIfNecessary")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SendAutoResponseIfNecessary")
	segment := newrelic.StartSegment(nrtx, "nr.app.SendAutoResponseIfNecessary")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SendAutoResponseIfNecessary(channel, sender)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SendEmailVerification(user *model.User, newEmail string, redirect string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SendEmailVerification")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SendEmailVerification")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SendEmailVerification")
	segment := newrelic.StartSegment(nrtx, "nr.app.SendEmailVerification")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SendEmailVerification(user, newEmail, redirect)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SendEphemeralPost(userId string, post *model.Post) *model.Post {
	origCtx := a.ctx
	a.log.Info("nr.app.SendEphemeralPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SendEphemeralPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SendEphemeralPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.SendEphemeralPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SendEphemeralPost(userId, post)

	return resultVar0
}

func (a *OpenTracingAppLayer) SendNotifications(post *model.Post, team *model.Team, channel *model.Channel, sender *model.User, parentPostList *model.PostList, setOnline bool) ([]string, error) {
	origCtx := a.ctx
	a.log.Info("nr.app.SendNotifications")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SendNotifications")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SendNotifications")
	segment := newrelic.StartSegment(nrtx, "nr.app.SendNotifications")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SendNotifications(post, team, channel, sender, parentPostList, setOnline)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SendPasswordReset(email string, siteURL string) (bool, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SendPasswordReset")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SendPasswordReset")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SendPasswordReset")
	segment := newrelic.StartSegment(nrtx, "nr.app.SendPasswordReset")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SendPasswordReset(email, siteURL)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) ServeInterPluginRequest(w http.ResponseWriter, r *http.Request, sourcePluginId string, destinationPluginId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.ServeInterPluginRequest")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ServeInterPluginRequest")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ServeInterPluginRequest")
	segment := newrelic.StartSegment(nrtx, "nr.app.ServeInterPluginRequest")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.ServeInterPluginRequest(w, r, sourcePluginId, destinationPluginId)
}

func (a *OpenTracingAppLayer) ServePluginPublicRequest(w http.ResponseWriter, r *http.Request) {
	origCtx := a.ctx
	a.log.Info("nr.app.ServePluginPublicRequest")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ServePluginPublicRequest")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ServePluginPublicRequest")
	segment := newrelic.StartSegment(nrtx, "nr.app.ServePluginPublicRequest")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.ServePluginPublicRequest(w, r)
}

func (a *OpenTracingAppLayer) ServePluginRequest(w http.ResponseWriter, r *http.Request) {
	origCtx := a.ctx
	a.log.Info("nr.app.ServePluginRequest")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ServePluginRequest")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ServePluginRequest")
	segment := newrelic.StartSegment(nrtx, "nr.app.ServePluginRequest")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.ServePluginRequest(w, r)
}

func (a *OpenTracingAppLayer) ServerBusyStateChanged(sbs *model.ServerBusyState) {
	origCtx := a.ctx
	a.log.Info("nr.app.ServerBusyStateChanged")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ServerBusyStateChanged")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ServerBusyStateChanged")
	segment := newrelic.StartSegment(nrtx, "nr.app.ServerBusyStateChanged")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.ServerBusyStateChanged(sbs)
}

func (a *OpenTracingAppLayer) SessionCacheLength() int {
	origCtx := a.ctx
	a.log.Info("nr.app.SessionCacheLength")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SessionCacheLength")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SessionCacheLength")
	segment := newrelic.StartSegment(nrtx, "nr.app.SessionCacheLength")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SessionCacheLength()

	return resultVar0
}

func (a *OpenTracingAppLayer) SessionHasPermissionTo(session model.Session, permission *model.Permission) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.SessionHasPermissionTo")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SessionHasPermissionTo")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SessionHasPermissionTo")
	segment := newrelic.StartSegment(nrtx, "nr.app.SessionHasPermissionTo")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SessionHasPermissionTo(session, permission)

	return resultVar0
}

func (a *OpenTracingAppLayer) SessionHasPermissionToAny(session model.Session, permissions []*model.Permission) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.SessionHasPermissionToAny")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SessionHasPermissionToAny")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SessionHasPermissionToAny")
	segment := newrelic.StartSegment(nrtx, "nr.app.SessionHasPermissionToAny")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SessionHasPermissionToAny(session, permissions)

	return resultVar0
}

func (a *OpenTracingAppLayer) SessionHasPermissionToCategory(session model.Session, userId string, teamId string, categoryId string) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.SessionHasPermissionToCategory")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SessionHasPermissionToCategory")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SessionHasPermissionToCategory")
	segment := newrelic.StartSegment(nrtx, "nr.app.SessionHasPermissionToCategory")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SessionHasPermissionToCategory(session, userId, teamId, categoryId)

	return resultVar0
}

func (a *OpenTracingAppLayer) SessionHasPermissionToChannel(session model.Session, channelId string, permission *model.Permission) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.SessionHasPermissionToChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SessionHasPermissionToChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SessionHasPermissionToChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.SessionHasPermissionToChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SessionHasPermissionToChannel(session, channelId, permission)

	return resultVar0
}

func (a *OpenTracingAppLayer) SessionHasPermissionToChannelByPost(session model.Session, postId string, permission *model.Permission) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.SessionHasPermissionToChannelByPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SessionHasPermissionToChannelByPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SessionHasPermissionToChannelByPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.SessionHasPermissionToChannelByPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SessionHasPermissionToChannelByPost(session, postId, permission)

	return resultVar0
}

func (a *OpenTracingAppLayer) SessionHasPermissionToManageBot(session model.Session, botUserId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SessionHasPermissionToManageBot")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SessionHasPermissionToManageBot")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SessionHasPermissionToManageBot")
	segment := newrelic.StartSegment(nrtx, "nr.app.SessionHasPermissionToManageBot")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SessionHasPermissionToManageBot(session, botUserId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SessionHasPermissionToTeam(session model.Session, teamId string, permission *model.Permission) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.SessionHasPermissionToTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SessionHasPermissionToTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SessionHasPermissionToTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.SessionHasPermissionToTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SessionHasPermissionToTeam(session, teamId, permission)

	return resultVar0
}

func (a *OpenTracingAppLayer) SessionHasPermissionToUser(session model.Session, userId string) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.SessionHasPermissionToUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SessionHasPermissionToUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SessionHasPermissionToUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.SessionHasPermissionToUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SessionHasPermissionToUser(session, userId)

	return resultVar0
}

func (a *OpenTracingAppLayer) SessionHasPermissionToUserOrBot(session model.Session, userId string) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.SessionHasPermissionToUserOrBot")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SessionHasPermissionToUserOrBot")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SessionHasPermissionToUserOrBot")
	segment := newrelic.StartSegment(nrtx, "nr.app.SessionHasPermissionToUserOrBot")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SessionHasPermissionToUserOrBot(session, userId)

	return resultVar0
}

func (a *OpenTracingAppLayer) SessionIsRegistered(session model.Session) bool {
	origCtx := a.ctx
	a.log.Info("nr.app.SessionIsRegistered")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SessionIsRegistered")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SessionIsRegistered")
	segment := newrelic.StartSegment(nrtx, "nr.app.SessionIsRegistered")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SessionIsRegistered(session)

	return resultVar0
}

func (a *OpenTracingAppLayer) SetActiveChannel(userId string, channelId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetActiveChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetActiveChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetActiveChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetActiveChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetActiveChannel(userId, channelId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetAutoResponderStatus(user *model.User, oldNotifyProps model.StringMap) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetAutoResponderStatus")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetAutoResponderStatus")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetAutoResponderStatus")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetAutoResponderStatus")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetAutoResponderStatus(user, oldNotifyProps)
}

func (a *OpenTracingAppLayer) SetBotIconImage(botUserId string, file io.ReadSeeker) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetBotIconImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetBotIconImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetBotIconImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetBotIconImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetBotIconImage(botUserId, file)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetBotIconImageFromMultiPartFile(botUserId string, imageData *multipart.FileHeader) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetBotIconImageFromMultiPartFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetBotIconImageFromMultiPartFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetBotIconImageFromMultiPartFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetBotIconImageFromMultiPartFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetBotIconImageFromMultiPartFile(botUserId, imageData)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetDefaultProfileImage(user *model.User) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetDefaultProfileImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetDefaultProfileImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetDefaultProfileImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetDefaultProfileImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetDefaultProfileImage(user)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetDiagnosticId(id string) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetDiagnosticId")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetDiagnosticId")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetDiagnosticId")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetDiagnosticId")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetDiagnosticId(id)
}

func (a *OpenTracingAppLayer) SetLog(l *mlog.Logger) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetLog")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetLog")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetLog")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetLog")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetLog(l)
}

func (a *OpenTracingAppLayer) SetPhase2PermissionsMigrationStatus(isComplete bool) error {
	origCtx := a.ctx
	a.log.Info("nr.app.SetPhase2PermissionsMigrationStatus")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetPhase2PermissionsMigrationStatus")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetPhase2PermissionsMigrationStatus")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetPhase2PermissionsMigrationStatus")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetPhase2PermissionsMigrationStatus(isComplete)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetPluginKey(pluginId string, key string, value []byte) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetPluginKey")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetPluginKey")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetPluginKey")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetPluginKey")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetPluginKey(pluginId, key, value)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetPluginKeyWithExpiry(pluginId string, key string, value []byte, expireInSeconds int64) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetPluginKeyWithExpiry")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetPluginKeyWithExpiry")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetPluginKeyWithExpiry")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetPluginKeyWithExpiry")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetPluginKeyWithExpiry(pluginId, key, value, expireInSeconds)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetPluginKeyWithOptions(pluginId string, key string, value []byte, options model.PluginKVSetOptions) (bool, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetPluginKeyWithOptions")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetPluginKeyWithOptions")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetPluginKeyWithOptions")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetPluginKeyWithOptions")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SetPluginKeyWithOptions(pluginId, key, value, options)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SetPluginsEnvironment(pluginsEnvironment *plugin.Environment) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetPluginsEnvironment")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetPluginsEnvironment")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetPluginsEnvironment")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetPluginsEnvironment")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetPluginsEnvironment(pluginsEnvironment)
}

func (a *OpenTracingAppLayer) SetProfileImage(userId string, imageData *multipart.FileHeader) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetProfileImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetProfileImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetProfileImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetProfileImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetProfileImage(userId, imageData)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetProfileImageFromFile(userId string, file io.Reader) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetProfileImageFromFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetProfileImageFromFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetProfileImageFromFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetProfileImageFromFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetProfileImageFromFile(userId, file)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetProfileImageFromMultiPartFile(userId string, file multipart.File) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetProfileImageFromMultiPartFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetProfileImageFromMultiPartFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetProfileImageFromMultiPartFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetProfileImageFromMultiPartFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetProfileImageFromMultiPartFile(userId, file)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetSamlIdpCertificateFromMetadata(data []byte) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetSamlIdpCertificateFromMetadata")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetSamlIdpCertificateFromMetadata")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetSamlIdpCertificateFromMetadata")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetSamlIdpCertificateFromMetadata")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetSamlIdpCertificateFromMetadata(data)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetSearchEngine(se *searchengine.Broker) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetSearchEngine")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetSearchEngine")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetSearchEngine")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetSearchEngine")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetSearchEngine(se)
}

func (a *OpenTracingAppLayer) SetSessionExpireInDays(session *model.Session, days int) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetSessionExpireInDays")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetSessionExpireInDays")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetSessionExpireInDays")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetSessionExpireInDays")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetSessionExpireInDays(session, days)
}

func (a *OpenTracingAppLayer) SetStatusAwayIfNeeded(userId string, manual bool) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetStatusAwayIfNeeded")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetStatusAwayIfNeeded")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetStatusAwayIfNeeded")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetStatusAwayIfNeeded")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetStatusAwayIfNeeded(userId, manual)
}

func (a *OpenTracingAppLayer) SetStatusDoNotDisturb(userId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetStatusDoNotDisturb")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetStatusDoNotDisturb")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetStatusDoNotDisturb")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetStatusDoNotDisturb")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetStatusDoNotDisturb(userId)
}

func (a *OpenTracingAppLayer) SetStatusLastActivityAt(userId string, activityAt int64) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetStatusLastActivityAt")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetStatusLastActivityAt")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetStatusLastActivityAt")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetStatusLastActivityAt")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetStatusLastActivityAt(userId, activityAt)
}

func (a *OpenTracingAppLayer) SetStatusOffline(userId string, manual bool) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetStatusOffline")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetStatusOffline")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetStatusOffline")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetStatusOffline")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetStatusOffline(userId, manual)
}

func (a *OpenTracingAppLayer) SetStatusOnline(userId string, manual bool) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetStatusOnline")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetStatusOnline")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetStatusOnline")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetStatusOnline")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetStatusOnline(userId, manual)
}

func (a *OpenTracingAppLayer) SetStatusOutOfOffice(userId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.SetStatusOutOfOffice")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetStatusOutOfOffice")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetStatusOutOfOffice")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetStatusOutOfOffice")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SetStatusOutOfOffice(userId)
}

func (a *OpenTracingAppLayer) SetTeamIcon(teamId string, imageData *multipart.FileHeader) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetTeamIcon")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetTeamIcon")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetTeamIcon")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetTeamIcon")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetTeamIcon(teamId, imageData)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetTeamIconFromFile(team *model.Team, file io.Reader) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetTeamIconFromFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetTeamIconFromFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetTeamIconFromFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetTeamIconFromFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetTeamIconFromFile(team, file)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SetTeamIconFromMultiPartFile(teamId string, file multipart.File) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SetTeamIconFromMultiPartFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SetTeamIconFromMultiPartFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SetTeamIconFromMultiPartFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.SetTeamIconFromMultiPartFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SetTeamIconFromMultiPartFile(teamId, file)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SlackImport(fileData multipart.File, fileSize int64, teamID string) (*model.AppError, *bytes.Buffer) {
	origCtx := a.ctx
	a.log.Info("nr.app.SlackImport")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SlackImport")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SlackImport")
	segment := newrelic.StartSegment(nrtx, "nr.app.SlackImport")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SlackImport(fileData, fileSize, teamID)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SoftDeleteTeam(teamId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SoftDeleteTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SoftDeleteTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SoftDeleteTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.SoftDeleteTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SoftDeleteTeam(teamId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SubmitInteractiveDialog(request model.SubmitDialogRequest) (*model.SubmitDialogResponse, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SubmitInteractiveDialog")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SubmitInteractiveDialog")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SubmitInteractiveDialog")
	segment := newrelic.StartSegment(nrtx, "nr.app.SubmitInteractiveDialog")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SubmitInteractiveDialog(request)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SwitchEmailToLdap(email string, password string, code string, ldapLoginId string, ldapPassword string) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SwitchEmailToLdap")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SwitchEmailToLdap")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SwitchEmailToLdap")
	segment := newrelic.StartSegment(nrtx, "nr.app.SwitchEmailToLdap")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SwitchEmailToLdap(email, password, code, ldapLoginId, ldapPassword)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SwitchEmailToOAuth(w http.ResponseWriter, r *http.Request, email string, password string, code string, service string) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SwitchEmailToOAuth")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SwitchEmailToOAuth")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SwitchEmailToOAuth")
	segment := newrelic.StartSegment(nrtx, "nr.app.SwitchEmailToOAuth")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SwitchEmailToOAuth(w, r, email, password, code, service)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SwitchLdapToEmail(ldapPassword string, code string, email string, newPassword string) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SwitchLdapToEmail")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SwitchLdapToEmail")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SwitchLdapToEmail")
	segment := newrelic.StartSegment(nrtx, "nr.app.SwitchLdapToEmail")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SwitchLdapToEmail(ldapPassword, code, email, newPassword)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SwitchOAuthToEmail(email string, password string, requesterId string) (string, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.SwitchOAuthToEmail")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SwitchOAuthToEmail")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SwitchOAuthToEmail")
	segment := newrelic.StartSegment(nrtx, "nr.app.SwitchOAuthToEmail")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.SwitchOAuthToEmail(email, password, requesterId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) SyncLdap() {
	origCtx := a.ctx
	a.log.Info("nr.app.SyncLdap")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SyncLdap")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SyncLdap")
	segment := newrelic.StartSegment(nrtx, "nr.app.SyncLdap")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SyncLdap()
}

func (a *OpenTracingAppLayer) SyncPlugins() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SyncPlugins")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SyncPlugins")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SyncPlugins")
	segment := newrelic.StartSegment(nrtx, "nr.app.SyncPlugins")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SyncPlugins()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) SyncPluginsActiveState() {
	origCtx := a.ctx
	a.log.Info("nr.app.SyncPluginsActiveState")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SyncPluginsActiveState")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SyncPluginsActiveState")
	segment := newrelic.StartSegment(nrtx, "nr.app.SyncPluginsActiveState")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SyncPluginsActiveState()
}

func (a *OpenTracingAppLayer) SyncRolesAndMembership(syncableID string, syncableType model.GroupSyncableType) {
	origCtx := a.ctx
	a.log.Info("nr.app.SyncRolesAndMembership")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SyncRolesAndMembership")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SyncRolesAndMembership")
	segment := newrelic.StartSegment(nrtx, "nr.app.SyncRolesAndMembership")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.SyncRolesAndMembership(syncableID, syncableType)
}

func (a *OpenTracingAppLayer) SyncSyncableRoles(syncableID string, syncableType model.GroupSyncableType) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.SyncSyncableRoles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.SyncSyncableRoles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.SyncSyncableRoles")
	segment := newrelic.StartSegment(nrtx, "nr.app.SyncSyncableRoles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.SyncSyncableRoles(syncableID, syncableType)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) TeamMembersMinusGroupMembers(teamID string, groupIDs []string, page int, perPage int) ([]*model.UserWithGroups, int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.TeamMembersMinusGroupMembers")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.TeamMembersMinusGroupMembers")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.TeamMembersMinusGroupMembers")
	segment := newrelic.StartSegment(nrtx, "nr.app.TeamMembersMinusGroupMembers")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1, resultVar2 := a.app.TeamMembersMinusGroupMembers(teamID, groupIDs, page, perPage)

	if resultVar2 != nil {
		span.LogFields(spanlog.Error(resultVar2))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1, resultVar2
}

func (a *OpenTracingAppLayer) TeamMembersToAdd(since int64, teamID *string) ([]*model.UserTeamIDPair, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.TeamMembersToAdd")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.TeamMembersToAdd")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.TeamMembersToAdd")
	segment := newrelic.StartSegment(nrtx, "nr.app.TeamMembersToAdd")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.TeamMembersToAdd(since, teamID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) TeamMembersToRemove(teamID *string) ([]*model.TeamMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.TeamMembersToRemove")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.TeamMembersToRemove")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.TeamMembersToRemove")
	segment := newrelic.StartSegment(nrtx, "nr.app.TeamMembersToRemove")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.TeamMembersToRemove(teamID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) TestElasticsearch(cfg *model.Config) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.TestElasticsearch")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.TestElasticsearch")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.TestElasticsearch")
	segment := newrelic.StartSegment(nrtx, "nr.app.TestElasticsearch")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.TestElasticsearch(cfg)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) TestEmail(userId string, cfg *model.Config) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.TestEmail")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.TestEmail")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.TestEmail")
	segment := newrelic.StartSegment(nrtx, "nr.app.TestEmail")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.TestEmail(userId, cfg)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) TestLdap() *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.TestLdap")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.TestLdap")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.TestLdap")
	segment := newrelic.StartSegment(nrtx, "nr.app.TestLdap")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.TestLdap()

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) TestSiteURL(siteURL string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.TestSiteURL")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.TestSiteURL")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.TestSiteURL")
	segment := newrelic.StartSegment(nrtx, "nr.app.TestSiteURL")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.TestSiteURL(siteURL)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) ToggleMuteChannel(channelId string, userId string) *model.ChannelMember {
	origCtx := a.ctx
	a.log.Info("nr.app.ToggleMuteChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ToggleMuteChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ToggleMuteChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.ToggleMuteChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.ToggleMuteChannel(channelId, userId)

	return resultVar0
}

func (a *OpenTracingAppLayer) TotalWebsocketConnections() int {
	origCtx := a.ctx
	a.log.Info("nr.app.TotalWebsocketConnections")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.TotalWebsocketConnections")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.TotalWebsocketConnections")
	segment := newrelic.StartSegment(nrtx, "nr.app.TotalWebsocketConnections")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.TotalWebsocketConnections()

	return resultVar0
}

func (a *OpenTracingAppLayer) TriggerWebhook(payload *model.OutgoingWebhookPayload, hook *model.OutgoingWebhook, post *model.Post, channel *model.Channel) {
	origCtx := a.ctx
	a.log.Info("nr.app.TriggerWebhook")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.TriggerWebhook")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.TriggerWebhook")
	segment := newrelic.StartSegment(nrtx, "nr.app.TriggerWebhook")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.TriggerWebhook(payload, hook, post, channel)
}

func (a *OpenTracingAppLayer) UnregisterPluginCommand(pluginId string, teamId string, trigger string) {
	origCtx := a.ctx
	a.log.Info("nr.app.UnregisterPluginCommand")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UnregisterPluginCommand")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UnregisterPluginCommand")
	segment := newrelic.StartSegment(nrtx, "nr.app.UnregisterPluginCommand")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.UnregisterPluginCommand(pluginId, teamId, trigger)
}

func (a *OpenTracingAppLayer) UnregisterPluginCommands(pluginId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.UnregisterPluginCommands")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UnregisterPluginCommands")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UnregisterPluginCommands")
	segment := newrelic.StartSegment(nrtx, "nr.app.UnregisterPluginCommands")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.UnregisterPluginCommands(pluginId)
}

func (a *OpenTracingAppLayer) UpdateActive(user *model.User, active bool) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateActive")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateActive")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateActive")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateActive")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateActive(user, active)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateBotActive(botUserId string, active bool) (*model.Bot, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateBotActive")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateBotActive")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateBotActive")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateBotActive")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateBotActive(botUserId, active)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateBotOwner(botUserId string, newOwnerId string) (*model.Bot, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateBotOwner")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateBotOwner")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateBotOwner")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateBotOwner")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateBotOwner(botUserId, newOwnerId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateChannel(channel *model.Channel) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateChannel(channel)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateChannelLastViewedAt(channelIds []string, userId string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateChannelLastViewedAt")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateChannelLastViewedAt")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateChannelLastViewedAt")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateChannelLastViewedAt")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdateChannelLastViewedAt(channelIds, userId)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdateChannelMemberNotifyProps(data map[string]string, channelId string, userId string) (*model.ChannelMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateChannelMemberNotifyProps")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateChannelMemberNotifyProps")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateChannelMemberNotifyProps")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateChannelMemberNotifyProps")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateChannelMemberNotifyProps(data, channelId, userId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateChannelMemberRoles(channelId string, userId string, newRoles string) (*model.ChannelMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateChannelMemberRoles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateChannelMemberRoles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateChannelMemberRoles")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateChannelMemberRoles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateChannelMemberRoles(channelId, userId, newRoles)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateChannelMemberSchemeRoles(channelId string, userId string, isSchemeGuest bool, isSchemeUser bool, isSchemeAdmin bool) (*model.ChannelMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateChannelMemberSchemeRoles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateChannelMemberSchemeRoles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateChannelMemberSchemeRoles")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateChannelMemberSchemeRoles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateChannelMemberSchemeRoles(channelId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateChannelPrivacy(oldChannel *model.Channel, user *model.User) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateChannelPrivacy")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateChannelPrivacy")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateChannelPrivacy")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateChannelPrivacy")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateChannelPrivacy(oldChannel, user)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateChannelScheme(channel *model.Channel) (*model.Channel, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateChannelScheme")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateChannelScheme")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateChannelScheme")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateChannelScheme")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateChannelScheme(channel)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateCommand(oldCmd *model.Command, updatedCmd *model.Command) (*model.Command, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateCommand")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateCommand")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateCommand")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateCommand")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateCommand(oldCmd, updatedCmd)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateConfig(f func(*model.Config)) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateConfig")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateConfig")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateConfig")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateConfig")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.UpdateConfig(f)
}

func (a *OpenTracingAppLayer) UpdateEphemeralPost(userId string, post *model.Post) *model.Post {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateEphemeralPost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateEphemeralPost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateEphemeralPost")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateEphemeralPost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdateEphemeralPost(userId, post)

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdateGroup(group *model.Group) (*model.Group, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateGroup")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateGroup")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateGroup")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateGroup")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateGroup(group)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateGroupSyncable(groupSyncable *model.GroupSyncable) (*model.GroupSyncable, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateGroupSyncable")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateGroupSyncable")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateGroupSyncable")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateGroupSyncable")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateGroupSyncable(groupSyncable)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateIncomingWebhook(oldHook *model.IncomingWebhook, updatedHook *model.IncomingWebhook) (*model.IncomingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateIncomingWebhook")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateIncomingWebhook")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateIncomingWebhook")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateIncomingWebhook")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateIncomingWebhook(oldHook, updatedHook)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateLastActivityAtIfNeeded(session model.Session) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateLastActivityAtIfNeeded")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateLastActivityAtIfNeeded")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateLastActivityAtIfNeeded")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateLastActivityAtIfNeeded")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.UpdateLastActivityAtIfNeeded(session)
}

func (a *OpenTracingAppLayer) UpdateMfa(activate bool, userId string, token string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateMfa")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateMfa")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateMfa")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateMfa")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdateMfa(activate, userId, token)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdateMobileAppBadge(userId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateMobileAppBadge")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateMobileAppBadge")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateMobileAppBadge")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateMobileAppBadge")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.UpdateMobileAppBadge(userId)
}

func (a *OpenTracingAppLayer) UpdateOAuthUserAttrs(userData io.Reader, user *model.User, provider einterfaces.OauthProvider, service string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateOAuthUserAttrs")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateOAuthUserAttrs")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateOAuthUserAttrs")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateOAuthUserAttrs")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdateOAuthUserAttrs(userData, user, provider, service)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdateOauthApp(oldApp *model.OAuthApp, updatedApp *model.OAuthApp) (*model.OAuthApp, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateOauthApp")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateOauthApp")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateOauthApp")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateOauthApp")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateOauthApp(oldApp, updatedApp)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateOutgoingWebhook(oldHook *model.OutgoingWebhook, updatedHook *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateOutgoingWebhook")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateOutgoingWebhook")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateOutgoingWebhook")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateOutgoingWebhook")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateOutgoingWebhook(oldHook, updatedHook)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdatePassword(user *model.User, newPassword string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdatePassword")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdatePassword")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdatePassword")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdatePassword")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdatePassword(user, newPassword)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdatePasswordAsUser(userId string, currentPassword string, newPassword string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdatePasswordAsUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdatePasswordAsUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdatePasswordAsUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdatePasswordAsUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdatePasswordAsUser(userId, currentPassword, newPassword)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdatePasswordByUserIdSendEmail(userId string, newPassword string, method string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdatePasswordByUserIdSendEmail")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdatePasswordByUserIdSendEmail")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdatePasswordByUserIdSendEmail")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdatePasswordByUserIdSendEmail")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdatePasswordByUserIdSendEmail(userId, newPassword, method)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdatePasswordSendEmail(user *model.User, newPassword string, method string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdatePasswordSendEmail")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdatePasswordSendEmail")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdatePasswordSendEmail")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdatePasswordSendEmail")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdatePasswordSendEmail(user, newPassword, method)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdatePost(post *model.Post, safeUpdate bool) (*model.Post, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdatePost")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdatePost")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdatePost")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdatePost")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdatePost(post, safeUpdate)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdatePreferences(userId string, preferences model.Preferences) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdatePreferences")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdatePreferences")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdatePreferences")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdatePreferences")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdatePreferences(userId, preferences)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdateRole(role *model.Role) (*model.Role, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateRole")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateRole")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateRole")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateRole")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateRole(role)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateScheme(scheme *model.Scheme) (*model.Scheme, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateScheme")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateScheme")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateScheme")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateScheme")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateScheme(scheme)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateSessionsIsGuest(userId string, isGuest bool) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateSessionsIsGuest")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateSessionsIsGuest")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateSessionsIsGuest")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateSessionsIsGuest")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.UpdateSessionsIsGuest(userId, isGuest)
}

func (a *OpenTracingAppLayer) UpdateSidebarCategories(userId string, teamId string, categories []*model.SidebarCategoryWithChannels) ([]*model.SidebarCategoryWithChannels, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateSidebarCategories")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateSidebarCategories")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateSidebarCategories")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateSidebarCategories")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateSidebarCategories(userId, teamId, categories)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateSidebarCategoryOrder(userId string, teamId string, categoryOrder []string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateSidebarCategoryOrder")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateSidebarCategoryOrder")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateSidebarCategoryOrder")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateSidebarCategoryOrder")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdateSidebarCategoryOrder(userId, teamId, categoryOrder)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdateTeam(team *model.Team) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateTeam")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateTeam")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateTeam")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateTeam")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateTeam(team)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateTeamMemberRoles(teamId string, userId string, newRoles string) (*model.TeamMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateTeamMemberRoles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateTeamMemberRoles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateTeamMemberRoles")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateTeamMemberRoles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateTeamMemberRoles(teamId, userId, newRoles)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateTeamMemberSchemeRoles(teamId string, userId string, isSchemeGuest bool, isSchemeUser bool, isSchemeAdmin bool) (*model.TeamMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateTeamMemberSchemeRoles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateTeamMemberSchemeRoles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateTeamMemberSchemeRoles")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateTeamMemberSchemeRoles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateTeamMemberSchemeRoles(teamId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateTeamPrivacy(teamId string, teamType string, allowOpenInvite bool) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateTeamPrivacy")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateTeamPrivacy")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateTeamPrivacy")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateTeamPrivacy")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdateTeamPrivacy(teamId, teamType, allowOpenInvite)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdateTeamScheme(team *model.Team) (*model.Team, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateTeamScheme")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateTeamScheme")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateTeamScheme")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateTeamScheme")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateTeamScheme(team)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateUser(user *model.User, sendNotifications bool) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateUser(user, sendNotifications)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateUserActive(userId string, active bool) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateUserActive")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateUserActive")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateUserActive")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateUserActive")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UpdateUserActive(userId, active)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UpdateUserAsUser(user *model.User, asAdmin bool) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateUserAsUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateUserAsUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateUserAsUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateUserAsUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateUserAsUser(user, asAdmin)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateUserAuth(userId string, userAuth *model.UserAuth) (*model.UserAuth, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateUserAuth")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateUserAuth")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateUserAuth")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateUserAuth")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateUserAuth(userId, userAuth)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateUserNotifyProps(userId string, props map[string]string) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateUserNotifyProps")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateUserNotifyProps")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateUserNotifyProps")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateUserNotifyProps")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateUserNotifyProps(userId, props)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateUserRoles(userId string, newRoles string, sendWebSocketEvent bool) (*model.User, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateUserRoles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateUserRoles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateUserRoles")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateUserRoles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpdateUserRoles(userId, newRoles, sendWebSocketEvent)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpdateWebConnUserActivity(session model.Session, activityAt int64) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpdateWebConnUserActivity")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpdateWebConnUserActivity")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpdateWebConnUserActivity")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpdateWebConnUserActivity")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.UpdateWebConnUserActivity(session, activityAt)
}

func (a *OpenTracingAppLayer) UploadEmojiImage(id string, imageData *multipart.FileHeader) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.UploadEmojiImage")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UploadEmojiImage")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UploadEmojiImage")
	segment := newrelic.StartSegment(nrtx, "nr.app.UploadEmojiImage")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.UploadEmojiImage(id, imageData)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) UploadFile(data []byte, channelId string, filename string) (*model.FileInfo, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UploadFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UploadFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UploadFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.UploadFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UploadFile(data, channelId, filename)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UploadFileX(channelId string, name string, input io.Reader, opts ...func(*app.UploadFileTask)) (*model.FileInfo, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UploadFileX")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UploadFileX")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UploadFileX")
	segment := newrelic.StartSegment(nrtx, "nr.app.UploadFileX")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UploadFileX(channelId, name, input, opts...)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UploadFiles(teamId string, channelId string, userId string, files []io.ReadCloser, filenames []string, clientIds []string, now time.Time) (*model.FileUploadResponse, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UploadFiles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UploadFiles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UploadFiles")
	segment := newrelic.StartSegment(nrtx, "nr.app.UploadFiles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UploadFiles(teamId, channelId, userId, files, filenames, clientIds, now)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UploadMultipartFiles(teamId string, channelId string, userId string, fileHeaders []*multipart.FileHeader, clientIds []string, now time.Time) (*model.FileUploadResponse, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UploadMultipartFiles")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UploadMultipartFiles")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UploadMultipartFiles")
	segment := newrelic.StartSegment(nrtx, "nr.app.UploadMultipartFiles")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UploadMultipartFiles(teamId, channelId, userId, fileHeaders, clientIds, now)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpsertGroupMember(groupID string, userID string) (*model.GroupMember, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpsertGroupMember")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpsertGroupMember")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpsertGroupMember")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpsertGroupMember")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpsertGroupMember(groupID, userID)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UpsertGroupSyncable(groupSyncable *model.GroupSyncable) (*model.GroupSyncable, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UpsertGroupSyncable")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UpsertGroupSyncable")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UpsertGroupSyncable")
	segment := newrelic.StartSegment(nrtx, "nr.app.UpsertGroupSyncable")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UpsertGroupSyncable(groupSyncable)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UserCanSeeOtherUser(userId string, otherUserId string) (bool, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UserCanSeeOtherUser")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UserCanSeeOtherUser")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UserCanSeeOtherUser")
	segment := newrelic.StartSegment(nrtx, "nr.app.UserCanSeeOtherUser")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UserCanSeeOtherUser(userId, otherUserId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) UserIsInAdminRoleGroup(userID string, syncableID string, syncableType model.GroupSyncableType) (bool, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.UserIsInAdminRoleGroup")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.UserIsInAdminRoleGroup")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.UserIsInAdminRoleGroup")
	segment := newrelic.StartSegment(nrtx, "nr.app.UserIsInAdminRoleGroup")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.UserIsInAdminRoleGroup(userID, syncableID, syncableType)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) VerifyEmailFromToken(userSuppliedTokenString string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.VerifyEmailFromToken")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.VerifyEmailFromToken")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.VerifyEmailFromToken")
	segment := newrelic.StartSegment(nrtx, "nr.app.VerifyEmailFromToken")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.VerifyEmailFromToken(userSuppliedTokenString)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) VerifyPlugin(plugin io.ReadSeeker, signature io.ReadSeeker) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.VerifyPlugin")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.VerifyPlugin")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.VerifyPlugin")
	segment := newrelic.StartSegment(nrtx, "nr.app.VerifyPlugin")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.VerifyPlugin(plugin, signature)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) VerifyUserEmail(userId string, email string) *model.AppError {
	origCtx := a.ctx
	a.log.Info("nr.app.VerifyUserEmail")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.VerifyUserEmail")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.VerifyUserEmail")
	segment := newrelic.StartSegment(nrtx, "nr.app.VerifyUserEmail")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0 := a.app.VerifyUserEmail(userId, email)

	if resultVar0 != nil {
		span.LogFields(spanlog.Error(resultVar0))
		ext.Error.Set(span, true)
	}

	return resultVar0
}

func (a *OpenTracingAppLayer) ViewChannel(view *model.ChannelView, userId string, currentSessionId string) (map[string]int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.ViewChannel")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.ViewChannel")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.ViewChannel")
	segment := newrelic.StartSegment(nrtx, "nr.app.ViewChannel")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.ViewChannel(view, userId, currentSessionId)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func (a *OpenTracingAppLayer) WaitForChannelMembership(channelId string, userId string) {
	origCtx := a.ctx
	a.log.Info("nr.app.WaitForChannelMembership")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.WaitForChannelMembership")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.WaitForChannelMembership")
	segment := newrelic.StartSegment(nrtx, "nr.app.WaitForChannelMembership")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	a.app.WaitForChannelMembership(channelId, userId)
}

func (a *OpenTracingAppLayer) WriteFile(fr io.Reader, path string) (int64, *model.AppError) {
	origCtx := a.ctx
	a.log.Info("nr.app.WriteFile")
	span, newCtx := tracing.StartSpanWithParentByContext(a.ctx, "app.WriteFile")
	nrtx := newrelic.FromContext(a.ctx)
	a.log.Info("end.nr.app.WriteFile")
	segment := newrelic.StartSegment(nrtx, "nr.app.WriteFile")
	defer segment.End()
	a.ctx = newCtx
	a.app.Srv().Store.SetContext(newCtx)
	logtime.Sleep(100 * logtime.Millisecond)
	defer func() {
		a.app.Srv().Store.SetContext(origCtx)
		a.ctx = origCtx
	}()

	defer span.Finish()
	resultVar0, resultVar1 := a.app.WriteFile(fr, path)

	if resultVar1 != nil {
		span.LogFields(spanlog.Error(resultVar1))
		ext.Error.Set(span, true)
	}

	return resultVar0, resultVar1
}

func NewOpenTracingAppLayer(childApp app.AppIface, ctx context.Context) *OpenTracingAppLayer {
	newApp := OpenTracingAppLayer{
		app: childApp,
		ctx: ctx,
	}

	newApp.srv = childApp.Srv()
	newApp.log = childApp.Log()
	newApp.notificationsLog = childApp.NotificationsLog()
	newApp.t = childApp.GetT()
	if childApp.Session() != nil {
		newApp.session = *childApp.Session()
	}
	newApp.requestId = childApp.RequestId()
	newApp.ipAddress = childApp.IpAddress()
	newApp.path = childApp.Path()
	newApp.userAgent = childApp.UserAgent()
	newApp.acceptLanguage = childApp.AcceptLanguage()
	newApp.accountMigration = childApp.AccountMigration()
	newApp.cluster = childApp.Cluster()
	newApp.compliance = childApp.Compliance()
	newApp.dataRetention = childApp.DataRetention()
	newApp.searchEngine = childApp.SearchEngine()
	newApp.ldap = childApp.Ldap()
	newApp.messageExport = childApp.MessageExport()
	newApp.metrics = childApp.Metrics()
	newApp.notification = childApp.Notification()
	newApp.saml = childApp.Saml()
	newApp.httpService = childApp.HTTPService()
	newApp.imageProxy = childApp.ImageProxy()
	newApp.timezones = childApp.Timezones()
	newApp.context = childApp.Context()

	return &newApp
}

func (a *OpenTracingAppLayer) Srv() *app.Server {
	return a.srv
}
func (a *OpenTracingAppLayer) Log() *mlog.Logger {
	return a.log
}
func (a *OpenTracingAppLayer) NotificationsLog() *mlog.Logger {
	return a.notificationsLog
}
func (a *OpenTracingAppLayer) T(translationID string, args ...interface{}) string {
	return a.t(translationID, args...)
}
func (a *OpenTracingAppLayer) Session() *model.Session {
	return &a.session
}
func (a *OpenTracingAppLayer) RequestId() string {
	return a.requestId
}
func (a *OpenTracingAppLayer) IpAddress() string {
	return a.ipAddress
}
func (a *OpenTracingAppLayer) Path() string {
	return a.path
}
func (a *OpenTracingAppLayer) UserAgent() string {
	return a.userAgent
}
func (a *OpenTracingAppLayer) AcceptLanguage() string {
	return a.acceptLanguage
}
func (a *OpenTracingAppLayer) AccountMigration() einterfaces.AccountMigrationInterface {
	return a.accountMigration
}
func (a *OpenTracingAppLayer) Cluster() einterfaces.ClusterInterface {
	return a.cluster
}
func (a *OpenTracingAppLayer) Compliance() einterfaces.ComplianceInterface {
	return a.compliance
}
func (a *OpenTracingAppLayer) DataRetention() einterfaces.DataRetentionInterface {
	return a.dataRetention
}
func (a *OpenTracingAppLayer) Ldap() einterfaces.LdapInterface {
	return a.ldap
}
func (a *OpenTracingAppLayer) MessageExport() einterfaces.MessageExportInterface {
	return a.messageExport
}
func (a *OpenTracingAppLayer) Metrics() einterfaces.MetricsInterface {
	return a.metrics
}
func (a *OpenTracingAppLayer) Notification() einterfaces.NotificationInterface {
	return a.notification
}
func (a *OpenTracingAppLayer) Saml() einterfaces.SamlInterface {
	return a.saml
}
func (a *OpenTracingAppLayer) HTTPService() httpservice.HTTPService {
	return a.httpService
}
func (a *OpenTracingAppLayer) ImageProxy() *imageproxy.ImageProxy {
	return a.imageProxy
}
func (a *OpenTracingAppLayer) Timezones() *timezones.Timezones {
	return a.timezones
}
func (a *OpenTracingAppLayer) Context() context.Context {
	return a.context
}
func (a *OpenTracingAppLayer) SetSession(sess *model.Session) {
	a.session = *sess
}
func (a *OpenTracingAppLayer) SetT(t i18n.TranslateFunc) {
	a.t = t
}
func (a *OpenTracingAppLayer) SetRequestId(str string) {
	a.requestId = str
}
func (a *OpenTracingAppLayer) SetIpAddress(str string) {
	a.ipAddress = str
}
func (a *OpenTracingAppLayer) SetUserAgent(str string) {
	a.userAgent = str
}
func (a *OpenTracingAppLayer) SetAcceptLanguage(str string) {
	a.acceptLanguage = str
}
func (a *OpenTracingAppLayer) SetPath(str string) {
	a.path = str
}
func (a *OpenTracingAppLayer) SetContext(c context.Context) {
	a.context = c
}
func (a *OpenTracingAppLayer) SetServer(srv *app.Server) {
	a.srv = srv
}
func (a *OpenTracingAppLayer) GetT() i18n.TranslateFunc {
	return a.t
}
